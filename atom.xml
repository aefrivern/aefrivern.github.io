<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>old-driver-zeroの小屋</title>
  <icon>https://old-driver-zero.github.io/icon.png</icon>
  <subtitle>欢迎来到old-driver-zeroの小屋作客</subtitle>
  <link href="https://old-driver-zero.github.io/atom.xml" rel="self"/>
  
  <link href="https://old-driver-zero.github.io/"/>
  <updated>2023-10-08T01:41:17.756Z</updated>
  <id>https://old-driver-zero.github.io/</id>
  
  <author>
    <name>old_driver_zero</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>社会主义 galgame</title>
    <link href="https://old-driver-zero.github.io/posts/d839b0e.html"/>
    <id>https://old-driver-zero.github.io/posts/d839b0e.html</id>
    <published>2023-10-08T01:15:05.968Z</published>
    <updated>2023-10-08T01:41:17.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这部作品画风很独特，给人一种很诡异的感觉，以至于 H-CG让人不太想看。前苏联的风格，如少先队、夏令营、列宁像等独特的元素还是让人眼前一亮。但苏联+日本水手服的搭配还是让人有点出戏，可以看出制作者有向日本galgame 看齐的意识，但是还有待打磨，形成自己的一套风格。</p><p>游戏的剧情尽管有点老套，是常见的穿越题材，但是胜在其对氛围的营造。尤其是Miku<del>（这和初音未来没有关系我不是很认可）</del>线，让人细思极恐。</p><p>总而言之，这应该算是俄罗斯 galgame一次出色的尝试了，即学习借鉴了日本风格，又有文化输出的意味，很值得学习。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;这部作品画风很独特，给人一种很诡异的感觉，以至于
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="Everlasting Summer" scheme="https://old-driver-zero.github.io/tags/Everlasting-Summer/"/>
    
      <category term="苏联" scheme="https://old-driver-zero.github.io/tags/%E8%8B%8F%E8%81%94/"/>
    
  </entry>
  
  <entry>
    <title>一场美丽奇幻的梦</title>
    <link href="https://old-driver-zero.github.io/posts/167c7c45.html"/>
    <id>https://old-driver-zero.github.io/posts/167c7c45.html</id>
    <published>2023-10-08T00:35:03.657Z</published>
    <updated>2023-10-08T01:10:43.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>这款游戏给我的第一感觉就是惊艳——颜色与几何图形勾画出满满的艺术风格，以及特定的颜色刻画出的氛围感与心理学理论。这些无不展现出这部游戏的神奇之处，然而我不懂心理学，所以对游戏魅力的理解将大打折扣。</p><p>当然，这并不影响其独特。因为玩这款游戏，不需要了解那些复杂的背景知识，只要全身心地沉浸在那种氛围中即可。白色的色调让人感到阴沉，蓝色的色调有忧郁的感觉，沙尘的红色代表着顽强，森林的绿色象征着希望。陪上符合场景的音乐，每个人都能有所感悟。</p><p>破碎的雕像，悠扬的歌声，突然出现的鳗鱼，这些东西都调动着我的感官，时而让我平静，时而让我紧张。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="GRIS" scheme="https://old-driver-zero.github.io/tags/GRIS/"/>
    
      <category term="第九艺术" scheme="https://old-driver-zero.github.io/tags/%E7%AC%AC%E4%B9%9D%E8%89%BA%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>王道的感动</title>
    <link href="https://old-driver-zero.github.io/posts/4db1a52a.html"/>
    <id>https://old-driver-zero.github.io/posts/4db1a52a.html</id>
    <published>2023-10-07T01:36:38.538Z</published>
    <updated>2023-10-07T02:08:57.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="羁绊的故事">羁绊的故事</h1><p>一个平平无奇的半精灵矿工，挖掘遗迹时碰到了被封印在水晶中的女子，把她救出来后自称是女神，想要去禁地，自己莫名其妙的成为了她的使徒，一路上保护着、陪伴着她前往那里。这的确是一个平平无奇的故事，除了那些在多个游戏中终于塑造出来的广阔的世界观外没有什么特别的地方。人物也很常见——元气满满的女神、白猫和黑猫、哈姆雷特般的龙女、得意的领主、被诅咒的魔术师、长翅膀的天使、四大精灵手下、师父、坏蛋商人、心狠手辣的王子，都是很常见的角色形象。但是，本作最难能可贵的一点是巧妙地通过“结缘”把这些形形色色的人物吸引到一起，而不是通过强迫等。</p><p>菲娅元气满满的精神和声音鼓舞着每一个不知道前方是什么的人，或许就是因为这个，人们才愿意跟着她前往不知为何物的圣地，帮助她对抗强大的敌人。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1
        
      
    
    </summary>
    
    
      <category term="ACG杂谈" scheme="https://old-driver-zero.github.io/categories/ACG%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="R18" scheme="https://old-driver-zero.github.io/tags/R18/"/>
    
      <category term="Eushully" scheme="https://old-driver-zero.github.io/tags/Eushully/"/>
    
  </entry>
  
  <entry>
    <title>当之无愧的鬼畜王</title>
    <link href="https://old-driver-zero.github.io/posts/21f18fd2.html"/>
    <id>https://old-driver-zero.github.io/posts/21f18fd2.html</id>
    <published>2023-10-07T01:11:15.595Z</published>
    <updated>2023-10-07T02:06:58.260Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="光鬼辉畜事迹">光（鬼）辉（畜）事迹</h1><p><del>你的恶行从魔王城到 Japan 无人不知无人不晓</del></p><h2 id="寻找小光">寻找小光</h2><p>万恶之源，无厘头的开始。女战士尤兰确实不错，还有利萨斯王女莉亚被教训后变成了一位不虐待少女的<del>好</del>女王，都像是戏剧一般。</p><h2 id="反叛的少女们">反叛的少女们</h2><p>兰斯结识了四个魔女，分别是魔想志津香、艾蕾诺亚·岚、米露·尤库斯、玛利亚·卡斯塔多，还有战士巴特，这部作品的重制较早，画风和玩法都比较老了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1
        
      
    
    </summary>
    
    
      <category term="ACG杂谈" scheme="https://old-driver-zero.github.io/categories/ACG%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="兰斯" scheme="https://old-driver-zero.github.io/tags/%E5%85%B0%E6%96%AF/"/>
    
      <category term="冒险" scheme="https://old-driver-zero.github.io/tags/%E5%86%92%E9%99%A9/"/>
    
      <category term="AliceSoft" scheme="https://old-driver-zero.github.io/tags/AliceSoft/"/>
    
      <category term="R18" scheme="https://old-driver-zero.github.io/tags/R18/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda 学习笔记</title>
    <link href="https://old-driver-zero.github.io/posts/1c5b1e9c.html"/>
    <id>https://old-driver-zero.github.io/posts/1c5b1e9c.html</id>
    <published>2023-09-28T09:08:04.415Z</published>
    <updated>2023-10-07T04:06:04.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="什么是-anaconda">什么是 Anaconda？</h1><p>Anaconda（<ahref="https://www.anaconda.com/">官方网站</a>）就是可以便捷获取包且对包能够进行管理，同时对环境可以统一管理的发行版本。Anaconda包含了conda、Python 在内的超过 180 个科学包及其依赖项。</p><p>Anaconda、conda、pip 的区别：</p><ul><li><strong>Anaconda</strong> 是一个包含 180+的科学包及其依赖项的发行版本。其包含的科学包包括：conda, numpy, scipy,ipython notebook 等。</li><li><strong>conda</strong> 是包及其依赖项和环境的管理工具<ul><li>快速安装、运行和升级包及其依赖项</li><li>在计算机中便捷地创建、保存、加载和切换环境</li><li>conda 为 Python 项目而创造，但可适用于多种语言</li></ul></li><li><strong>pip</strong> 是用于安装和管理软件包的包管理器</li></ul><p>conda 和 pip 的比较：</p><ul><li><p>依赖项检查</p><ul><li><p>pip</p><ul><li><strong>不一定</strong>会展示所需其他依赖包</li><li>安装包时<strong>或许</strong>会直接忽略依赖项而安装，仅在结果中提示错误</li></ul></li><li><p>conda</p><ul><li>列出所需其他依赖包</li><li>安装包时自动安装其依赖项</li><li>可以便捷地在包的不同版本中自由切换</li></ul></li></ul></li><li><p>环境管理</p><ul><li>pip：维护多个环境难度较大</li><li>conda：比较方便地在不同环境之间进行切换，环境管理较为简单</li></ul></li><li><p>对系统自带Python的影响</p><ul><li>pip：在系统自带Python中包的更新/回退版本/卸载将影响其他程序</li><li>conda：不会影响系统自带Python</li></ul></li></ul><h1 id="安装">安装</h1><p><a href="https://www.anaconda.com/download">官网下载</a></p><ul><li><strong>不要</strong>以管理员身份安装</li><li><strong>不要</strong>勾选 “Add Anaconda to my PATH environmentvariable.”</li></ul><h1 id="更新与换源">更新与换源</h1><p>添加三个环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">anaconda3\Library\bin<br>anaconda3\Scripts<br>anaconda3\<br></code></pre></td></tr></table></figure><p>验证 conda 已被安装：<code>conda --version</code></p><p>更新 conda 至最新版本：<code>conda update conda</code></p><p>升级 Anaconda Navigator：<code>conda update anaconda-navigator</code></p><p>升级所有包：<code>conda update --all</code></p><p>查看 conda 帮助信息：<code>conda -h</code></p><p>中科大源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/<br>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/<br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure><p>清华源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure><h1 id="管理环境">管理环境</h1><p><strong>创建新环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name &lt;env_name&gt; &lt;package_names&gt;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><code>&lt;env_name&gt;</code> 即创建的环境名</li><li><code>&lt;package_names&gt;</code> 即安装在环境中的包名</li><li>如果要安装指定的版本号，则只需要在包名后面以 <code>python=</code>和版本号的形式执行。如：<code>conda create --name python2 python=2.7</code>，即创建一个名为 <code>python2</code> 的环境，环境中安装版本为 2.7 的python</li><li>如果要在新创建的环境中创建多个包，则直接在<code>&lt;package_names&gt;</code> 后以空格隔开，添加多个包名即可。如：<code>conda create -n python3 python=3.5 numpy pandas</code>，即创建一个名为 <code>python3</code>的环境，环境中安装版本为 3.5 的python，同时也安装了 numpy 和 pandas</li></ul><p><strong>切换环境</strong>：<code>activate &lt;env_name&gt;</code></p><p><strong>退出环境</strong>：<code>deactivate</code></p><p><strong>显示已创建环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda info --envs<br>或<br>conda info -e<br>或<br>conda env list<br></code></pre></td></tr></table></figure><p><strong>复制环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --name &lt;new_env_name&gt; --clone &lt;copied_env_name&gt;<br></code></pre></td></tr></table></figure><p><strong>删除环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove --name &lt;env_name&gt; --all<br></code></pre></td></tr></table></figure><h1 id="管理包">管理包</h1><p><strong>查找可供安装的包版本</strong></p><ul><li>精确查找</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda search --full-name &lt;package_full_name&gt;<br></code></pre></td></tr></table></figure><ul><li>模糊查找</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda search &lt;text&gt;<br></code></pre></td></tr></table></figure><p><strong>获取当前环境中已安装的包信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda list<br></code></pre></td></tr></table></figure><p><strong>安装包</strong></p><ul><li>在指定环境中安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install --name &lt;env_name&gt; &lt;package_name&gt;<br></code></pre></td></tr></table></figure><ul><li>在当前环境中安装包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install &lt;package_name&gt;<br></code></pre></td></tr></table></figure><p><strong>卸载包</strong></p><ul><li>在指定环境中卸载包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove --name &lt;env_name&gt; &lt;package_name&gt;<br></code></pre></td></tr></table></figure><ul><li>在当前环境中卸载包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove &lt;package_name&gt;<br></code></pre></td></tr></table></figure><p><strong>更新包</strong></p><ul><li>更新指定包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda update &lt;package_name&gt;<br></code></pre></td></tr></table></figure><ul><li>更新所有包</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda update --all<br></code></pre></td></tr></table></figure><h2 id="用-pip-命令安装">用 pip 命令安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install &lt;package_name&gt;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>pip 只是包管理器，无法对环境进行管理。因此如果想在指定环境中使用 pip进行安装包，则需要先切换到指定环境中，再使用 pip 命令安装包。</li><li>pip 无法更新 python，因为 pip 并不将 python 视为包。</li><li>pip 可以安装一些 conda 无法安装的包；conda 也可以安装一些 pip无法安装的包。因此当使用一种命令无法安装包时，可以尝试用另一种命令。</li></ul><h2 id="从-anaconda-安装包">从 Anaconda 安装包</h2><p>点击 <a href="http://anaconda.org/">AnacondaCloud</a>，搜索包名，复制代码</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;什么是-anaconda&quot;&gt;什么是
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://old-driver-zero.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="数据科学" scheme="https://old-driver-zero.github.io/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
      <category term="Python" scheme="https://old-driver-zero.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>孤独是致死的疾病</title>
    <link href="https://old-driver-zero.github.io/posts/b1168675.html"/>
    <id>https://old-driver-zero.github.io/posts/b1168675.html</id>
    <published>2023-09-21T23:50:55.699Z</published>
    <updated>2023-09-22T01:06:43.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div id="aplayer-oSEOhviA"class="aplayer aplayer-tag-marker meting-tag-marker" data-id="26220167"data-server="netease" data-type="song" data-mode="random"data-autoplay="false" data-listmaxheight="340px" data-preload="auto"data-theme="#e3f2f5" data-volume="0.4" data-mutex="true"></div><h1 id="金色的麦田">金色的麦田</h1><p>这部作品满满的中世纪风格，乡村、城镇、教会、远征、神话，这些无不透露出中世纪的感觉，以至于我几乎都忘了这是一部“异世界”番。<del>还有这里面非常丰富的经济学与货币知识，是毫无疑问的《金融市场基础知识》</del></p><p>赫萝的人设也非常讨喜，神秘、调皮、妩媚、知性，在人物形象普遍扁平化的二次元女性角色中非常独特，让我认为她似乎不是一个二次元角色，而是一个完完全全的民间传说中的人物。</p><p>还有男主，作为一个商人，他拥有标准的商人品质：贪婪、大胆。他四处旅行经商，为的是能有一家自己的店铺，能够安定下来。这实在是太贴近我们普通人了，没有人天生喜欢流浪，我们四处奔波，只是为了梦想和安宁。</p><h1 id="旅行唯有出发前最愉快">旅行唯有出发前最愉快</h1><p>这部番的主题基调是欢乐的，无论是旅行中两人的打情骂俏，还是经商时的坑蒙拐骗，甚至是一次次的死里逃生，无不流露出快乐。但是，我总觉得美好的日常中似乎隐藏着孤独的气息，似乎是因为灰蒙蒙的画面，但更多的也许是因为他们彼此心知肚明却不忍提起的未来。</p><p>因为少年的请求，赫萝在约伊兹守护了麦田数百年，后来随着科技的提高，村民们不再需要她的帮助了，她的朋友们早已远去，这么多年来，她一直是一个人。所以她萌生了重返故乡的念头，或许她主动找上男主，也是看到了他的孤独。作为一个异乡人，他有很多熟人，却从未有一个朋友，他有很多栖身处，却从未有一个家。就像他在约伊兹看到村民们祭典的盛况时说的，这些热闹与我无关。所以，两个人就这样开始了跌跌撞撞的旅行。</p><p>两人相识、相知、相爱，就像经典的恋爱故事，简单而让人百看不腻。旅行确实到了终点不会多么愉快，但是出发时的那份快乐将伴随着整趟旅程。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;div
        
      
    
    </summary>
    
    
      <category term="ACG杂谈" scheme="https://old-driver-zero.github.io/categories/ACG%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="旅行" scheme="https://old-driver-zero.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="神话" scheme="https://old-driver-zero.github.io/tags/%E7%A5%9E%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>ASCII码对照表</title>
    <link href="https://old-driver-zero.github.io/posts/e462ba83.html"/>
    <id>https://old-driver-zero.github.io/posts/e462ba83.html</id>
    <published>2023-09-16T04:59:16.575Z</published>
    <updated>2023-09-16T07:40:50.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="ascii-码表控制字符">ASCII 码表（控制字符）</h2><table><colgroup><col style="width: 11%" /><col style="width: 11%" /><col style="width: 13%" /><col style="width: 11%" /><col style="width: 12%" /><col style="width: 15%" /><col style="width: 23%" /></colgroup><thead><tr class="header"><th>十进制 DEC</th><th>八进制 OCT</th><th>十六进制 HEX</th><th>二进制 BIN</th><th>符号 Symbol</th><th>HTML 实体编码</th><th>中文解释 Description</th></tr></thead><tbody><tr class="odd"><td>0</td><td>000</td><td>00</td><td>00000000</td><td>NUL</td><td><code>&amp;#000;</code></td><td>空字符</td></tr><tr class="even"><td>1</td><td>001</td><td>01</td><td>00000001</td><td>SOH</td><td><code>&amp;#001;</code></td><td>标题开始</td></tr><tr class="odd"><td>2</td><td>002</td><td>02</td><td>00000010</td><td>STX</td><td><code>&amp;#002;</code></td><td>正文开始</td></tr><tr class="even"><td>3</td><td>003</td><td>03</td><td>00000011</td><td>ETX</td><td><code>&amp;#003;</code></td><td>正文结束</td></tr><tr class="odd"><td>4</td><td>004</td><td>04</td><td>00000100</td><td>EOT</td><td><code>&amp;#004;</code></td><td>传输结束</td></tr><tr class="even"><td>5</td><td>005</td><td>05</td><td>00000101</td><td>ENQ</td><td><code>&amp;#005;</code></td><td>询问</td></tr><tr class="odd"><td>6</td><td>006</td><td>06</td><td>00000110</td><td>ACK</td><td><code>&amp;#006;</code></td><td>收到通知</td></tr><tr class="even"><td>7</td><td>007</td><td>07</td><td>00000111</td><td>BEL</td><td><code>&amp;#007;</code></td><td>铃</td></tr><tr class="odd"><td>8</td><td>010</td><td>08</td><td>00001000</td><td>BS</td><td><code>&amp;#008;</code></td><td>退格</td></tr><tr class="even"><td>9</td><td>011</td><td>09</td><td>00001001</td><td>HT</td><td><code>&amp;#009;</code></td><td>水平制表符</td></tr><tr class="odd"><td>10</td><td>012</td><td>0A</td><td>00001010</td><td>LF</td><td><code>&amp;#010;</code></td><td>换行键</td></tr><tr class="even"><td>11</td><td>013</td><td>0B</td><td>00001011</td><td>VT</td><td><code>&amp;#011;</code></td><td>垂直制表符</td></tr><tr class="odd"><td>12</td><td>014</td><td>0C</td><td>00001100</td><td>FF</td><td><code>&amp;#012;</code></td><td>换页键</td></tr><tr class="even"><td>13</td><td>015</td><td>0D</td><td>00001101</td><td>CR</td><td><code>&amp;#013;</code></td><td>回车键</td></tr><tr class="odd"><td>14</td><td>016</td><td>0E</td><td>00001110</td><td>SO</td><td><code>&amp;#014;</code></td><td>移出</td></tr><tr class="even"><td>15</td><td>017</td><td>0F</td><td>00001111</td><td>SI</td><td><code>&amp;#015;</code></td><td>移入</td></tr><tr class="odd"><td>16</td><td>020</td><td>10</td><td>00010000</td><td>DLE</td><td><code>&amp;#016;</code></td><td>数据链路转义</td></tr><tr class="even"><td>17</td><td>021</td><td>11</td><td>00010001</td><td>DC1</td><td><code>&amp;#017;</code></td><td>设备控制 1</td></tr><tr class="odd"><td>18</td><td>022</td><td>12</td><td>00010010</td><td>DC2</td><td><code>&amp;#018;</code></td><td>设备控制 2</td></tr><tr class="even"><td>19</td><td>023</td><td>13</td><td>00010011</td><td>DC3</td><td><code>&amp;#019;</code></td><td>设备控制 3</td></tr><tr class="odd"><td>20</td><td>024</td><td>14</td><td>00010100</td><td>DC4</td><td><code>&amp;#020;</code></td><td>设备控制 4</td></tr><tr class="even"><td>21</td><td>025</td><td>15</td><td>00010101</td><td>NAK</td><td><code>&amp;#021;</code></td><td>拒绝接收</td></tr><tr class="odd"><td>22</td><td>026</td><td>16</td><td>00010110</td><td>SYN</td><td><code>&amp;#022;</code></td><td>同步空闲</td></tr><tr class="even"><td>23</td><td>027</td><td>17</td><td>00010111</td><td>ETB</td><td><code>&amp;#023;</code></td><td>传输块结束</td></tr><tr class="odd"><td>24</td><td>030</td><td>18</td><td>00011000</td><td>CAN</td><td><code>&amp;#024;</code></td><td>取消</td></tr><tr class="even"><td>25</td><td>031</td><td>19</td><td>00011001</td><td>EM</td><td><code>&amp;#025;</code></td><td>介质中断</td></tr><tr class="odd"><td>26</td><td>032</td><td>1A</td><td>00011010</td><td>SUB</td><td><code>&amp;#026;</code></td><td>替换</td></tr><tr class="even"><td>27</td><td>033</td><td>1B</td><td>00011011</td><td>ESC</td><td><code>&amp;#027;</code></td><td>换码符</td></tr><tr class="odd"><td>28</td><td>034</td><td>1C</td><td>00011100</td><td>FS</td><td><code>&amp;#028;</code></td><td>文件分隔符</td></tr><tr class="even"><td>29</td><td>035</td><td>1D</td><td>00011101</td><td>GS</td><td><code>&amp;#029;</code></td><td>组分隔符</td></tr><tr class="odd"><td>30</td><td>036</td><td>1E</td><td>00011110</td><td>RS</td><td><code>&amp;#030;</code></td><td>记录分离符</td></tr><tr class="even"><td>31</td><td>037</td><td>1F</td><td>00011111</td><td>US</td><td><code>&amp;#031;</code></td><td>单元分隔符</td></tr></tbody></table><h2 id="ascii-码表打印字符">ASCII 码表（打印字符）</h2><table><colgroup><col style="width: 11%" /><col style="width: 11%" /><col style="width: 13%" /><col style="width: 11%" /><col style="width: 12%" /><col style="width: 15%" /><col style="width: 23%" /></colgroup><thead><tr class="header"><th>十进制 DEC</th><th>八进制 OCT</th><th>十六进制 HEX</th><th>二进制 BIN</th><th>符号 Symbol</th><th>HTML 实体编码</th><th>中文解释 Description</th></tr></thead><tbody><tr class="odd"><td>32</td><td>040</td><td>20</td><td>00100000</td><td></td><td><code>&amp;#032;</code></td><td>空格</td></tr><tr class="even"><td>33</td><td>041</td><td>21</td><td>00100001</td><td>!</td><td><code>&amp;#033;</code></td><td>感叹号</td></tr><tr class="odd"><td>34</td><td>042</td><td>22</td><td>00100010</td><td>"</td><td><code>&amp;#034;</code></td><td>双引号</td></tr><tr class="even"><td>35</td><td>043</td><td>23</td><td>00100011</td><td>#</td><td><code>&amp;#035;</code></td><td>井号</td></tr><tr class="odd"><td>36</td><td>044</td><td>24</td><td>00100100</td><td>$</td><td><code>&amp;#036;</code></td><td>美元符</td></tr><tr class="even"><td>37</td><td>045</td><td>25</td><td>00100101</td><td>%</td><td><code>&amp;#037;</code></td><td>百分号</td></tr><tr class="odd"><td>38</td><td>046</td><td>26</td><td>00100110</td><td>&amp;</td><td><code>&amp;#038;</code></td><td>与</td></tr><tr class="even"><td>39</td><td>047</td><td>27</td><td>00100111</td><td>'</td><td><code>&amp;#039;</code></td><td>单引号</td></tr><tr class="odd"><td>40</td><td>050</td><td>28</td><td>00101000</td><td>(</td><td><code>&amp;#040;</code></td><td>左括号</td></tr><tr class="even"><td>41</td><td>051</td><td>29</td><td>00101001</td><td>)</td><td><code>&amp;#041;</code></td><td>右括号</td></tr><tr class="odd"><td>42</td><td>052</td><td>2A</td><td>00101010</td><td>*</td><td><code>&amp;#042;</code></td><td>星号</td></tr><tr class="even"><td>43</td><td>053</td><td>2B</td><td>00101011</td><td>+</td><td><code>&amp;#043;</code></td><td>加号</td></tr><tr class="odd"><td>44</td><td>054</td><td>2C</td><td>00101100</td><td>,</td><td><code>&amp;#044;</code></td><td>逗号</td></tr><tr class="even"><td>45</td><td>055</td><td>2D</td><td>00101101</td><td>-</td><td><code>&amp;#045;</code></td><td>连字号或减号</td></tr><tr class="odd"><td>46</td><td>056</td><td>2E</td><td>00101110</td><td>.</td><td><code>&amp;#046;</code></td><td>句点或小数点</td></tr><tr class="even"><td>47</td><td>057</td><td>2F</td><td>00101111</td><td>/</td><td><code>&amp;#047;</code></td><td>斜杠</td></tr><tr class="odd"><td>48</td><td>060</td><td>30</td><td>00110000</td><td>0</td><td><code>&amp;#048;</code></td><td>0</td></tr><tr class="even"><td>49</td><td>061</td><td>31</td><td>00110001</td><td>1</td><td><code>&amp;#049;</code></td><td>1</td></tr><tr class="odd"><td>50</td><td>062</td><td>32</td><td>00110010</td><td>2</td><td><code>&amp;#050;</code></td><td>2</td></tr><tr class="even"><td>51</td><td>063</td><td>33</td><td>00110011</td><td>3</td><td><code>&amp;#051;</code></td><td>3</td></tr><tr class="odd"><td>52</td><td>064</td><td>34</td><td>00110100</td><td>4</td><td><code>&amp;#052;</code></td><td>4</td></tr><tr class="even"><td>53</td><td>065</td><td>35</td><td>00110101</td><td>5</td><td><code>&amp;#053;</code></td><td>5</td></tr><tr class="odd"><td>54</td><td>066</td><td>36</td><td>00110110</td><td>6</td><td><code>&amp;#054;</code></td><td>6</td></tr><tr class="even"><td>55</td><td>067</td><td>37</td><td>00110111</td><td>7</td><td><code>&amp;#055;</code></td><td>7</td></tr><tr class="odd"><td>56</td><td>070</td><td>38</td><td>00111000</td><td>8</td><td><code>&amp;#056;</code></td><td>8</td></tr><tr class="even"><td>57</td><td>071</td><td>39</td><td>00111001</td><td>9</td><td><code>&amp;#057;</code></td><td>9</td></tr><tr class="odd"><td>58</td><td>072</td><td>3A</td><td>00111010</td><td>:</td><td><code>&amp;#058;</code></td><td>冒号</td></tr><tr class="even"><td>59</td><td>073</td><td>3B</td><td>00111011</td><td>;</td><td><code>&amp;#059;</code></td><td>分号</td></tr><tr class="odd"><td>60</td><td>074</td><td>3C</td><td>00111100</td><td>&lt;</td><td><code>&amp;#060;</code></td><td>小于</td></tr><tr class="even"><td>61</td><td>075</td><td>3D</td><td>00111101</td><td>=</td><td><code>&amp;#061;</code></td><td>等号</td></tr><tr class="odd"><td>62</td><td>076</td><td>3E</td><td>00111110</td><td>&gt;</td><td><code>&amp;#062;</code></td><td>大于</td></tr><tr class="even"><td>63</td><td>077</td><td>3F</td><td>00111111</td><td>?</td><td><code>&amp;#063;</code></td><td>问号</td></tr><tr class="odd"><td>64</td><td>100</td><td>40</td><td>01000000</td><td>@</td><td><code>&amp;#064;</code></td><td>电子邮件符号</td></tr><tr class="even"><td>65</td><td>101</td><td>41</td><td>01000001</td><td>A</td><td><code>&amp;#065;</code></td><td>大写字母 A</td></tr><tr class="odd"><td>66</td><td>102</td><td>42</td><td>01000010</td><td>B</td><td><code>&amp;#066;</code></td><td>大写字母 B</td></tr><tr class="even"><td>67</td><td>103</td><td>43</td><td>01000011</td><td>C</td><td><code>&amp;#067;</code></td><td>大写字母 C</td></tr><tr class="odd"><td>68</td><td>104</td><td>44</td><td>01000100</td><td>D</td><td><code>&amp;#068;</code></td><td>大写字母 D</td></tr><tr class="even"><td>69</td><td>105</td><td>45</td><td>01000101</td><td>E</td><td><code>&amp;#069;</code></td><td>大写字母 E</td></tr><tr class="odd"><td>70</td><td>106</td><td>46</td><td>01000110</td><td>F</td><td><code>&amp;#070;</code></td><td>大写字母 F</td></tr><tr class="even"><td>71</td><td>107</td><td>47</td><td>01000111</td><td>G</td><td><code>&amp;#071;</code></td><td>大写字母 G</td></tr><tr class="odd"><td>72</td><td>110</td><td>48</td><td>01001000</td><td>H</td><td><code>&amp;#072;</code></td><td>大写字母 H</td></tr><tr class="even"><td>73</td><td>111</td><td>49</td><td>01001001</td><td>I</td><td><code>&amp;#073;</code></td><td>大写字母 I</td></tr><tr class="odd"><td>74</td><td>112</td><td>4A</td><td>01001010</td><td>J</td><td><code>&amp;#074;</code></td><td>大写字母 J</td></tr><tr class="even"><td>75</td><td>113</td><td>4B</td><td>01001011</td><td>K</td><td><code>&amp;#075;</code></td><td>大写字母 K</td></tr><tr class="odd"><td>76</td><td>114</td><td>4C</td><td>01001100</td><td>L</td><td><code>&amp;#076;</code></td><td>大写字母 L</td></tr><tr class="even"><td>77</td><td>115</td><td>4D</td><td>01001101</td><td>M</td><td><code>&amp;#077;</code></td><td>大写字母 M</td></tr><tr class="odd"><td>78</td><td>116</td><td>4E</td><td>01001110</td><td>N</td><td><code>&amp;#078;</code></td><td>大写字母 N</td></tr><tr class="even"><td>79</td><td>117</td><td>4F</td><td>01001111</td><td>O</td><td><code>&amp;#079;</code></td><td>大写字母 O</td></tr><tr class="odd"><td>80</td><td>120</td><td>50</td><td>01010000</td><td>P</td><td><code>&amp;#080;</code></td><td>大写字母 P</td></tr><tr class="even"><td>81</td><td>121</td><td>51</td><td>01010001</td><td>Q</td><td><code>&amp;#081;</code></td><td>大写字母 Q</td></tr><tr class="odd"><td>82</td><td>122</td><td>52</td><td>01010010</td><td>R</td><td><code>&amp;#082;</code></td><td>大写字母 R</td></tr><tr class="even"><td>83</td><td>123</td><td>53</td><td>01010011</td><td>S</td><td><code>&amp;#083;</code></td><td>大写字母 S</td></tr><tr class="odd"><td>84</td><td>124</td><td>54</td><td>01010100</td><td>T</td><td><code>&amp;#084;</code></td><td>大写字母 T</td></tr><tr class="even"><td>85</td><td>125</td><td>55</td><td>01010101</td><td>U</td><td><code>&amp;#085;</code></td><td>大写字母 U</td></tr><tr class="odd"><td>86</td><td>126</td><td>56</td><td>01010110</td><td>V</td><td><code>&amp;#086;</code></td><td>大写字母 V</td></tr><tr class="even"><td>87</td><td>127</td><td>57</td><td>01010111</td><td>W</td><td><code>&amp;#087</code></td><td>大写字母 W</td></tr><tr class="odd"><td>88</td><td>130</td><td>58</td><td>01011000</td><td>X</td><td><code>&amp;#088;</code></td><td>大写字母 X</td></tr><tr class="even"><td>89</td><td>131</td><td>59</td><td>01011001</td><td>Y</td><td><code>&amp;#089;</code></td><td>大写字母 Y</td></tr><tr class="odd"><td>90</td><td>132</td><td>5A</td><td>01011010</td><td>Z</td><td><code>&amp;#090;</code></td><td>大写字母 Z</td></tr><tr class="even"><td>91</td><td>133</td><td>5B</td><td>01011011</td><td>[</td><td><code>&amp;#091;</code></td><td>左中括号</td></tr><tr class="odd"><td>92</td><td>134</td><td>5C</td><td>01011100</td><td>\</td><td><code>&amp;#092;</code></td><td>反斜杠</td></tr><tr class="even"><td>93</td><td>135</td><td>5D</td><td>01011101</td><td>]</td><td><code>&amp;#093;</code></td><td>右中括号</td></tr><tr class="odd"><td>94</td><td>136</td><td>5E</td><td>01011110</td><td>^</td><td><code>&amp;#094;</code></td><td>音调符号</td></tr><tr class="even"><td>95</td><td>137</td><td>5F</td><td>01011111</td><td>_</td><td><code>&amp;#095;</code></td><td>下划线</td></tr><tr class="odd"><td>96</td><td>140</td><td>60</td><td>01100000</td><td>`</td><td><code>&amp;#096;</code></td><td>重音符</td></tr><tr class="even"><td>97</td><td>141</td><td>61</td><td>01100001</td><td>a</td><td><code>&amp;#097;</code></td><td>小写字母 a</td></tr><tr class="odd"><td>98</td><td>142</td><td>62</td><td>01100010</td><td>b</td><td><code>&amp;#098;</code></td><td>小写字母 b</td></tr><tr class="even"><td>99</td><td>143</td><td>63</td><td>01100011</td><td>c</td><td><code>&amp;#099;</code></td><td>小写字母 c</td></tr><tr class="odd"><td>100</td><td>144</td><td>64</td><td>01100100</td><td>d</td><td><code>&amp;#100;</code></td><td>小写字母 d</td></tr><tr class="even"><td>101</td><td>145</td><td>65</td><td>01100101</td><td>e</td><td><code>&amp;#101;</code></td><td>小写字母 e</td></tr><tr class="odd"><td>102</td><td>146</td><td>66</td><td>01100110</td><td>f</td><td><code>&amp;#102;</code></td><td>小写字母 f</td></tr><tr class="even"><td>103</td><td>147</td><td>67</td><td>01100111</td><td>g</td><td><code>&amp;#103;</code></td><td>小写字母 g</td></tr><tr class="odd"><td>104</td><td>150</td><td>68</td><td>01101000</td><td>h</td><td><code>&amp;#104;</code></td><td>小写字母 h</td></tr><tr class="even"><td>105</td><td>151</td><td>69</td><td>01101001</td><td>i</td><td><code>&amp;#105;</code></td><td>小写字母 i</td></tr><tr class="odd"><td>106</td><td>152</td><td>6A</td><td>01101010</td><td>j</td><td><code>&amp;#106;</code></td><td>小写字母 j</td></tr><tr class="even"><td>107</td><td>153</td><td>6B</td><td>01101011</td><td>k</td><td><code>&amp;#107;</code></td><td>小写字母 k</td></tr><tr class="odd"><td>108</td><td>154</td><td>6C</td><td>01101100</td><td>l</td><td><code>&amp;#108;</code></td><td>小写字母 l</td></tr><tr class="even"><td>109</td><td>155</td><td>6D</td><td>01101101</td><td>m</td><td><code>&amp;#109;</code></td><td>小写字母 m</td></tr><tr class="odd"><td>110</td><td>156</td><td>6E</td><td>01101110</td><td>n</td><td><code>&amp;#110;</code></td><td>小写字母 n</td></tr><tr class="even"><td>111</td><td>157</td><td>6F</td><td>01101111</td><td>o</td><td><code>&amp;#111;</code></td><td>小写字母 o</td></tr><tr class="odd"><td>112</td><td>160</td><td>70</td><td>01110000</td><td>p</td><td><code>&amp;#112;</code></td><td>小写字母 p</td></tr><tr class="even"><td>113</td><td>161</td><td>71</td><td>01110001</td><td>q</td><td><code>&amp;#113;</code></td><td>小写字母 q</td></tr><tr class="odd"><td>114</td><td>162</td><td>72</td><td>01110010</td><td>r</td><td><code>&amp;#114;</code></td><td>小写字母 r</td></tr><tr class="even"><td>115</td><td>163</td><td>73</td><td>01110011</td><td>s</td><td><code>&amp;#115;</code></td><td>小写字母 s</td></tr><tr class="odd"><td>116</td><td>164</td><td>74</td><td>01110100</td><td>t</td><td><code>&amp;#116;</code></td><td>小写字母 t</td></tr><tr class="even"><td>117</td><td>165</td><td>75</td><td>01110101</td><td>u</td><td><code>&amp;#117;</code></td><td>小写字母 u</td></tr><tr class="odd"><td>118</td><td>166</td><td>76</td><td>01110110</td><td>v</td><td><code>&amp;#118;</code></td><td>小写字母 v</td></tr><tr class="even"><td>119</td><td>167</td><td>77</td><td>01110111</td><td>w</td><td><code>&amp;#119;</code></td><td>小写字母 w</td></tr><tr class="odd"><td>120</td><td>170</td><td>78</td><td>01111000</td><td>x</td><td><code>&amp;#120;</code></td><td>小写字母 x</td></tr><tr class="even"><td>121</td><td>171</td><td>79</td><td>01111001</td><td>y</td><td><code>&amp;#121;</code></td><td>小写字母 y</td></tr><tr class="odd"><td>122</td><td>172</td><td>7A</td><td>01111010</td><td>z</td><td><code>&amp;#122;</code></td><td>小写字母 z</td></tr><tr class="even"><td>123</td><td>173</td><td>7B</td><td>01111011</td><td>{</td><td><code>&amp;#123;</code></td><td>左大括号</td></tr><tr class="odd"><td>124</td><td>174</td><td>7C</td><td>01111100</td><td>|</td><td><code>&amp;#124;</code></td><td>垂直线</td></tr><tr class="even"><td>125</td><td>175</td><td>7D</td><td>01111101</td><td>}</td><td><code>&amp;#125;</code></td><td>右大括号</td></tr><tr class="odd"><td>126</td><td>176</td><td>7E</td><td>01111110</td><td>~</td><td><code>&amp;#126;</code></td><td>波浪号</td></tr><tr class="even"><td>127</td><td>177</td><td>7F</td><td>01111111</td><td></td><td><code>&amp;#127;</code></td><td>删除</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;ascii-码表控制字符&quot;&gt;ASCII
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://old-driver-zero.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编码" scheme="https://old-driver-zero.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>NumPy 学习笔记</title>
    <link href="https://old-driver-zero.github.io/posts/6a8518ce.html"/>
    <id>https://old-driver-zero.github.io/posts/6a8518ce.html</id>
    <published>2023-09-16T04:33:15.991Z</published>
    <updated>2023-09-16T07:41:15.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简介">简介</h1><p>Numpy 相当于增强版的 array，使用时往往先以简称引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h1 id="基础">基础</h1><h2 id="属性">属性</h2><p>Numpy 数组的类是 <code>ndarray</code>，有以下属性：</p><table><colgroup><col style="width: 20%" /><col style="width: 79%" /></colgroup><thead><tr class="header"><th>名称</th><th>解释</th></tr></thead><tbody><tr class="odd"><td><code>ndarray.ndim</code></td><td>数组的维度</td></tr><tr class="even"><td><code>size</code></td><td>数组的元素数量，即 <code>shape</code> 的各元素乘积</td></tr><tr class="odd"><td><code>shape</code></td><td>返回一个 tuple，如对于 n 行 m 列的矩阵，返回<code>(n, m)</code></td></tr></tbody></table><h2 id="创建数组">创建数组</h2><p>使用列表和 <code>np.array</code> 创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>使用 <code>zeros</code> 创建全是 0 的数组，使用 <code>ones</code>创建全是 1 的数组，默认为浮点类型，可以使用 <code>dtype</code>参数指定类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>np.zeros((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br>array([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.ones((<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), dtype=np.int16)<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]],dtype=int16)<br></code></pre></td></tr></table></figure><p><code>arange</code> 返回一个数字序列，类似于 python 中的<code>range</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>np.arange(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">5</span>)<br>array([<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>, <span class="hljs-number">25</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0.3</span>)  <span class="hljs-comment"># 支持浮点数</span><br>array([<span class="hljs-number">0.</span> , <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.9</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.8</span>])<br></code></pre></td></tr></table></figure><p>因为很难预计浮点数的个数，所以可以用 <code>linspace</code>显示指定数字个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>)                   <span class="hljs-comment"># 从 0 到 2 的 9 个数</span><br>array([<span class="hljs-number">0.</span>  , <span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span> , <span class="hljs-number">0.75</span>, <span class="hljs-number">1.</span>  , <span class="hljs-number">1.25</span>, <span class="hljs-number">1.5</span> , <span class="hljs-number">1.75</span>, <span class="hljs-number">2.</span>  ])<br></code></pre></td></tr></table></figure><h2 id="基本操作">基本操作</h2><p>算术运算按元素使用，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>c = a - b<br><span class="hljs-meta">&gt;&gt;&gt; </span>c<br>array([<span class="hljs-number">20</span>, <span class="hljs-number">29</span>, <span class="hljs-number">38</span>, <span class="hljs-number">47</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>b**<span class="hljs-number">2</span><br>array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">10</span> * np.sin(a)<br>array([ <span class="hljs-number">9.12945251</span>, -<span class="hljs-number">9.88031624</span>,  <span class="hljs-number">7.4511316</span> , -<span class="hljs-number">2.62374854</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a &lt; <span class="hljs-number">35</span><br>array([ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>])<br></code></pre></td></tr></table></figure><p>矩阵乘法使用 <code>.dot</code> 或 <code>@</code>，如<code>A @ B</code> 或 `A.dot(B)</p><p>有一些预先定义的函数，如<code>sum</code>、<code>max</code>、<code>min</code>等，默认不考虑其形状，视为一串数字，可以使用 <code>axis=</code>参数指定坐标轴：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>       [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)     <span class="hljs-comment"># 每列的和</span><br>array([<span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">1</span>)     <span class="hljs-comment"># 每行的最小值</span><br>array([<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>b.cumsum(axis=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 每行的累积和</span><br>array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>],<br>       [ <span class="hljs-number">4</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">15</span>, <span class="hljs-number">22</span>],<br>       [ <span class="hljs-number">8</span>, <span class="hljs-number">17</span>, <span class="hljs-number">27</span>, <span class="hljs-number">38</span>]])<br></code></pre></td></tr></table></figure><p>通用函数，如 <code>sin</code>、<code>sqrt</code>等，接受数组，生成数组，如 <code>np.add(B, C)</code></p><p>更多函数：</p><p><ahref="https://numpy.org/doc/stable/reference/generated/numpy.all.html#numpy.all"><code>all</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.any.html#numpy.any"><code>any</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.apply_along_axis.html#numpy.apply_along_axis"><code>apply_along_axis</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.argmax.html#numpy.argmax"><code>argmax</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.argmin.html#numpy.argmin"><code>argmin</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html#numpy.argsort"><code>argsort</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.average.html#numpy.average"><code>average</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.bincount.html#numpy.bincount"><code>bincount</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.ceil.html#numpy.ceil"><code>ceil</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.clip.html#numpy.clip"><code>clip</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.conj.html#numpy.conj"><code>conj</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.corrcoef.html#numpy.corrcoef"><code>corrcoef</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.cov.html#numpy.cov"><code>cov</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.cross.html#numpy.cross"><code>cross</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.cumprod.html#numpy.cumprod"><code>cumprod</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.cumsum.html#numpy.cumsum"><code>cumsum</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.diff.html#numpy.diff"><code>diff</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.dot.html#numpy.dot"><code>dot</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.floor.html#numpy.floor"><code>floor</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.inner.html#numpy.inner"><code>inner</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.invert.html#numpy.invert"><code>invert</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.lexsort.html#numpy.lexsort"><code>lexsort</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.max.html#numpy.max"><code>max</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.maximum.html#numpy.maximum"><code>maximum</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.mean.html#numpy.mean"><code>mean</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.median.html#numpy.median"><code>median</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.min.html#numpy.min"><code>min</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.minimum.html#numpy.minimum"><code>minimum</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.nonzero.html#numpy.nonzero"><code>nonzero</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.outer.html#numpy.outer"><code>outer</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.prod.html#numpy.prod"><code>prod</code></a>,<ahref="https://docs.python.org/3/library/re.html#module-re"><code>re</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.round.html#numpy.round"><code>round</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.sort.html#numpy.sort"><code>sort</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.std.html#numpy.std"><code>std</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.sum.html#numpy.sum"><code>sum</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.trace.html#numpy.trace"><code>trace</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.transpose.html#numpy.transpose"><code>transpose</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.var.html#numpy.var"><code>var</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.vdot.html#numpy.vdot"><code>vdot</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.vectorize.html#numpy.vectorize"><code>vectorize</code></a>,<ahref="https://numpy.org/doc/stable/reference/generated/numpy.where.html#numpy.where"><code>where</code></a></p><h2 id="切片与索引">切片与索引</h2><p>支持索引、切片、迭代</p><p>缺失的维度相当于使用了 <code>:</code>，如对于二维数组<code>b[-1]</code> 等价于 <code>b[-1, :]</code></p><p><code>...</code> 代表自动填充 <code>:</code>，如对于五维数组<code>x[1, 2, ...]</code> 等价于 <code>x[1, 2, :, :, :]</code></p><p>想要迭代高维度的所有元素，使用 <code>flat</code>，如<code>for element in b.flat:</code></p><h1 id="形状操纵">形状操纵</h1><h2 id="改变形状">改变形状</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">a.ravel()  <span class="hljs-comment"># 返回展平的 array</span><br>array([<span class="hljs-number">3.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">9.</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.reshape(<span class="hljs-number">6</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 修改形状</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.reshape(<span class="hljs-number">6</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment"># 支持接受参数 -1，表示自动计算出值</span><br>array([[<span class="hljs-number">3.</span>, <span class="hljs-number">7.</span>],<br>       [<span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">4.</span>],<br>       [<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">7.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">4.</span>, <span class="hljs-number">9.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.T  <span class="hljs-comment"># 转置矩阵</span><br>array([[<span class="hljs-number">3.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">7.</span>],<br>       [<span class="hljs-number">7.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">3.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">4.</span>],<br>       [<span class="hljs-number">4.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">9.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.T.shape<br>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a.resize((<span class="hljs-number">2</span>, <span class="hljs-number">6</span>)) <span class="hljs-comment"># 与 reshape 类似，但是会修改 a</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">3.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">4.</span>],<br>       [<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">9.</span>]])<br></code></pre></td></tr></table></figure><h2 id="把不同数组堆叠到一起">把不同数组堆叠到一起</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>],<br>       [<span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>array([[<span class="hljs-number">1.</span>, <span class="hljs-number">9.</span>],<br>       [<span class="hljs-number">5.</span>, <span class="hljs-number">1.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.vstack((a, b)) <span class="hljs-comment"># 竖直堆叠</span><br>array([[<span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>],<br>       [<span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">9.</span>],<br>       [<span class="hljs-number">5.</span>, <span class="hljs-number">1.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.hstack((a, b)) <span class="hljs-comment"># 水平堆叠</span><br>array([[<span class="hljs-number">9.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">9.</span>],<br>       [<span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">1.</span>]])<br></code></pre></td></tr></table></figure><p><code>column_stack</code> 把一维数组作为列堆叠到二维数组中</p><h2 id="分裂数组">分裂数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.floor(<span class="hljs-number">10</span> * rg.random((<span class="hljs-number">2</span>, <span class="hljs-number">12</span>)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">9.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 把 a 分成 3 份</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>np.hsplit(a, <span class="hljs-number">3</span>)<br>[array([[<span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">9.</span>],<br>       [<span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">7.</span>]]), array([[<span class="hljs-number">0.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>]]), array([[<span class="hljs-number">6.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 在第三列和第四列后分裂 a</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>np.hsplit(a, (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br>[array([[<span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">6.</span>],<br>       [<span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">5.</span>]]), array([[<span class="hljs-number">9.</span>],<br>       [<span class="hljs-number">7.</span>]]), array([[<span class="hljs-number">0.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">2.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">8.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">0.</span>]])]<br></code></pre></td></tr></table></figure><p>类似的，也有 <code>vsplit</code></p><h1 id="进阶索引">进阶索引</h1><h2 id="用索引数组索引">用索引数组索引</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>)**<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>i = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>])  <span class="hljs-comment"># 一个索引数组</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a[i]  <span class="hljs-comment"># a 中 i 位置的元素</span><br>array([ <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">64</span>, <span class="hljs-number">25</span>])<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>j = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">7</span>]])  <span class="hljs-comment"># 多维的也可以</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a[j]<br>array([[ <span class="hljs-number">9</span>, <span class="hljs-number">16</span>],<br>       [<span class="hljs-number">81</span>, <span class="hljs-number">49</span>]])<br></code></pre></td></tr></table></figure><p>如果是多维数组，则使用多维索引，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>       [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>i = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],  <span class="hljs-comment"># a 的第一维的索引</span><br><span class="hljs-meta">... </span>              [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>j = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">1</span>],  <span class="hljs-comment"># a 的第二维的索引</span><br><span class="hljs-meta">... </span>              [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>]])<br>&gt;&gt;&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[i, j]<br>array([[ <span class="hljs-number">2</span>,  <span class="hljs-number">5</span>],<br>       [ <span class="hljs-number">7</span>, <span class="hljs-number">11</span>]])<br></code></pre></td></tr></table></figure><p>在 python 中，<code>arr[i, j]</code> 和 <code>arr[(i, j)]</code>等价</p><p>也可以使用索引数组赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]] = <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="用-boolean-数组索引">用 Boolean 数组索引</h2><p>可以用来筛选满足某些条件的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = a &gt; <span class="hljs-number">4</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>array([[<span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>],<br>       [<span class="hljs-literal">False</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>],<br>       [ <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>,  <span class="hljs-literal">True</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[b]<br>array([ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a[b] = <span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>       [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;Numpy 相当于增强版的
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://old-driver-zero.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="数据科学" scheme="https://old-driver-zero.github.io/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
      <category term="Python" scheme="https://old-driver-zero.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>UCB Data100：数据科学原理与技术</title>
    <link href="https://old-driver-zero.github.io/posts/b6d66f1b.html"/>
    <id>https://old-driver-zero.github.io/posts/b6d66f1b.html</id>
    <published>2023-09-16T03:08:16.020Z</published>
    <updated>2023-10-13T05:43:30.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="课程概述-course-overview">课程概述 Course Overview</h1><p>在数据科学中有很多工具，但它们不会<strong>思考</strong></p><blockquote><p>The purpose of computing is insight, not numbers.<br />计算的目的是洞察，而不是数字<br />——Hamming</p></blockquote><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/数据科学的生命周期.webp"alt="数据科学的生命周期" /><figcaption aria-hidden="true">数据科学的生命周期</figcaption></figure><h1 id="数据采样和概率-data-sampling-and-probability">数据采样和概率Data Sampling and Probability</h1><figure><img src="/illustration/UCB%20Data100：数据科学原理与技术/采样.webp"alt="采样" /><figcaption aria-hidden="true">采样</figcaption></figure><p>偏差：</p><ul><li>选择偏差：可能不包括或有利于特定的群体</li><li>回应偏差：人们不会真实回答</li><li>不回应偏差：人们不一定回答</li></ul><p>有替换的随机取样：避免一个人被选到两次</p><p>简单随机取样：一个人可能被选到两次</p><p>在样本总量很大时，两者表现相似</p><p>二项式/多项式概率</p><h1 id="pandas">Pandas</h1><p>引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><p>生成的是 <code>DataFrame</code> 类（类似于一张表）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">elections = pd.read_csv(<span class="hljs-string">&quot;elections.csv&quot;</span>)<br></code></pre></td></tr></table></figure><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/DataFrame.webp"alt="DataFrame" /><figcaption aria-hidden="true">DataFrame</figcaption></figure><p>这个类有丰富的<ahref="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">API</a>，这里只介绍其中的一部分</p><h2 id="索引">索引</h2><p><code>elections.head(5)</code>：获取前五行；<code>.tail</code>同理</p><p><code>loc</code> 通过<strong>标签 label</strong>选择物品，有行标签和列标签</p><p><code>loc</code> 的参数可以是：</p><ul><li>列表：<code>elections.loc[[87,25,179],["Year","Candidate","Result"]]</code></li><li>切片：<code>elections.loc[[87,25,179],"Popular vote":"%"]</code>，注意这里的对字符串的切片表示从<code>Popular vote</code> 到 <code>%</code> 的所有列</li><li>值：<code>elections.loc[[87,25,179],"Popular vote"]</code></li></ul><p>同样可以只使用 <code>:</code> 来选取所有元素</p><p><code>iloc</code> 使用<strong>数字</strong>（0-xx）选取物品</p><p><code>[]</code> 只接受一个参数：</p><ul><li>行数字的切片</li><li>列标签的列表</li><li>单个列标签</li></ul><p>在 pandas 中有三个基本数据结构：</p><ul><li>Data Frame：二维数据表格</li><li>Series：一维数据</li><li>Index：行标签序列</li></ul><p>可以把 Data Frame 视为有相同 Index 的 Series 的集合</p><p>行标签不一定要唯一，列标签一般唯一</p><p>使用 <code>Series.to_frame()</code> 可以把 Series 转为 DataFrame类型</p><h2 id="条件选择">条件选择</h2><p>因为支持用 bool列表索引，可以写成：<code>elections[elections["Party"] == 'Independent']</code>表示选出所有符合的人物。支持更多运算符</p><p>还有一些函数可以用于筛选，如</p><ul><li><code>.isin</code></li><li>`<code>.str.startswith</code></li><li><code>.query</code>：<code>elections.query('Year &gt;= 2000 and Result == "Win"')</code>，类似于SQL 的操作<ul><li>用 <code>@character</code> 访问 python 变量</li></ul></li></ul><h2 id="其它">其它</h2><p><code>.size</code>、<code>.shape</code> 同 Numpy</p><p><code>.describe()</code>统计了各列有用的值，包括数量、平均值、方差、最小值、25%、50%、75%、最大值</p><p><code>.sample(n)</code> 随机取 n 行，默认是无重复的，可以使用<code>replace=True</code> 改为有重复的</p><p><code>.value_counts()</code> 计算 Series 中每个值的出现次数</p><p><code>Series.unique()</code> 返回一个包括所有不重复的值的 Series</p><p><code>.sort_values()</code> 给 DataFrame 排序，可指定的参数有<code>ascending</code>、<code>key</code>、<code>by</code> 等</p><h2 id="添加修改与删除">添加、修改与删除</h2><p>添加一列非常简单：<code>babynames["name_lengths"] = babyname_lengths</code>向 <code>babynames</code> DataFrame 中添加标签为<code>name_lengths</code> 的一列，数据是<code>babyname_lengths</code></p><p>删除一列：<code>babynames.drop("name_lengths", axis = 'columns')</code></p><p>修改：使用<code>map</code>：<code>babynames["dr_ea_count"] = babynames["Name"].map(dr_ea_count)</code></p><h2 id="groupby-和-agg">groupby 和 agg</h2><figure><img src="/illustration/UCB%20Data100：数据科学原理与技术/groupby.webp"alt="groupby原理" /><figcaption aria-hidden="true">groupby原理</figcaption></figure><p>在 <code>agg</code> 之前显式选择列<code>fbn.groupby("Name")[["Count"]].agg(ratio_to_peak)</code></p><p><code>groupby</code> 返回一个 DataFrameGroupBy 对象，<code>agg</code>是其中之一生成 DataFrame 的方法，其它的还有</p><ul><li><code>max</code>：使用 <code>max</code> 函数聚合</li><li><code>size</code>：使用每个子 frame 的大小创建一个新的 Series</li><li><code>filter</code>：从原始 DataFrame中复制一个新的，但只保留满足条件的行</li></ul><h2 id="pivot-tables">Pivot Tables</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">babynames_pivot= babynames.pivot_table(<br>index=<span class="hljs-string">&#x27;Year&#x27;</span>, <span class="hljs-comment"># 行</span><br>columns=<span class="hljs-string">&#x27;Sex&#x27;</span>, <span class="hljs-comment"># 列</span><br>values=[<span class="hljs-string">&#x27;Count&#x27;</span>,<span class="hljs-string">&#x27;Name&#x27;</span>],<br>aggfunc-np.<span class="hljs-built_in">max</span>, <span class="hljs-comment"># 分组操作</span><br>)<br></code></pre></td></tr></table></figure><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/Pivot%20Tables.webp"alt="Pivot Tables" /><figcaption aria-hidden="true">Pivot Tables</figcaption></figure><h2 id="合并表格">合并表格</h2><p><code>merged = pd.merge(left= elections, right= male_2020_babynames, left_on= "First Name", right_on= "Name")</code></p><h1 id="数据整理和-eda-data-wrangling-and-eda">数据整理和 EDA DataWrangling and EDA</h1><ul><li>结构<ul><li>表格，矩阵</li><li>TSV，CSV，JSON</li><li>xml，txt</li><li>定性 qualitative</li><li>定量 quantitative</li></ul></li><li>粒度</li><li>范围</li><li>时效性</li><li>可靠性</li></ul><h1 id="可视化-visualization">可视化 Visualization</h1><p>目的：</p><ul><li>帮助你理解数据</li><li>与别人交流结果</li></ul><p>画条形图：</p><ul><li><p>Series.bar</p></li><li><p>plt.bar</p></li><li><p>sns.countplot</p></li></ul><p>图表类型</p><ul><li><p>histogram</p></li><li><p>box plot</p></li><li><p>violin plot</p></li><li><p>scatter plot</p><ul><li>contour plot</li><li>hex plot</li></ul></li></ul><p><strong>KDE Kernel density estimation</strong>：</p><ul><li>在每个数据点放一个 kernel（一般是高斯 kernel，即正态分布）</li><li>标准化为 1</li><li>将所有 kernel 加起来</li></ul><p>颜色的选择</p><p>取对数等方法转变为线性关系</p><h1id="建模和简单线性回归-modeling-and-simple-linear-regression">建模和简单线性回归Modeling and Simple Linear Regression</h1><p>线性回归是最小化<strong>平均平方误差</strong>估计的直线</p><p><strong>相关系数 correlation</strong> <spanclass="math inline">\(r\)</span> 是 x 和 y 乘积的平均值，并标准化：</p><p><span class="math display">\[r = \frac{1}{n} \sum_{i=1}^n (\frac{x_i- \bar{x}}{\sigma_x}) (\frac{y_i - \bar{y}}{\sigma_y})\]</span></p><p><em><strong>协方差 covariance</strong> <spanclass="math inline">\(\frac{1}{n}\sum_{i=1}^n (x_i - \bar{x}) (y_i -\bar{y}) = r \sigma_x \sigma_y\)</span></em></p><p><span class="math inline">\(r\)</span>表示了两个变量之间的线性，<span class="math inline">\(|r| &lt;1\)</span>，越接近 1 则线性程度越高，为正表示两个变量正相关</p><p>线性回归：</p><p><span class="math display">\[\hat{y} = \hat{a} +\hat{b}x\]</span></p><p><span class="math display">\[\hat{b} =r\frac{\sigma_y}{\sigma_x}\]</span></p><p><span class="math display">\[\hat{a} = \bar{y} - \hat{b}\bar{x}\]</span></p><p><span class="math display">\[e_i = y_i - \hat{y}_i\]</span></p><p><strong>模型 model</strong>是一个系统的<strong>理想化表示</strong></p><p>为什么要建模？</p><ul><li>理解复杂的现象</li><li>对于未知的数据做出准确的估计</li></ul><p><strong>简单线性回归 Modeling and Simple Linear Regression（SLR）</strong> 是一个<strong>参数模型 parametricmodel</strong>，即可以基于数据选择最好的斜率和截距的参数</p><table><colgroup><col style="width: 18%" /><col style="width: 31%" /><col style="width: 18%" /><col style="width: 31%" /></colgroup><thead><tr class="header"><th>符号</th><th>含义</th><th>符号</th><th>含义</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(y\)</span></td><td>真实观察值</td><td><span class="math inline">\(\hat{y}\)</span></td><td>估计值</td></tr><tr class="even"><td><span class="math inline">\(\theta\)</span></td><td>模型参数</td><td><span class="math inline">\(\hat{\theta}\)</span></td><td>最优参数（定义<strong>最优</strong>）</td></tr></tbody></table><p>建模过程：</p><ol type="1"><li>选择模型</li><li>选择损失函数</li><li>填充模型</li><li>估计模型表现</li></ol><p><strong>损失函数 loss function</strong> 特征化错误</p><p>平方损失：<span class="math inline">\(L(y, \hat{y}) = (y -\hat{y})^2\)</span></p><p>绝对值损失：<span class="math inline">\(L(y, \hat{y}) = |y -\hat{y}|\)</span></p><p>平均损失：<span class="math inline">\(R(\theta) = \frac{1}{n}\sum_{i=1}^n L(y_i,\hat{y}_i)\)</span>，其揭示了模型与数据的符合程度</p><p>通过求导的方法求出最优解中的 b</p><p>通过可视化等方法评估模型的好坏</p><h1id="常数模型损失和转换-constant-model-loss-and-transformations">常数模型，损失和转换Constant Model, Loss, and Transformations</h1><p><strong>估计 estimation</strong>是使用<strong>数据</strong>决定<strong>模型参数</strong>的工作</p><p><strong>预计 prediction</strong>是使用<strong>模型</strong>预计<strong>未知数据</strong>的工作</p><p>常数模型</p><p><span class="math display">\[\hat{y} = \theta\]</span></p><p>通过最小平方可以得出 <span class="math inline">\(\hat{\theta} =\bar{y}\)</span></p><p>常数模型与线性回归模型比较：</p><ul><li>常数模型：<ul><li><span class="math inline">\(\theta\)</span> 是一维的</li><li>损失表面是二维的</li><li>预计轴须图 rug plot</li></ul></li><li>线性回归模型：<ul><li><span class="math inline">\(\theta\)</span> 是二维的</li><li>损失表面是三维的</li><li>预计散点图</li></ul></li></ul><p>如果使用绝对值损失，则 <span class="math inline">\(\hat{\theta} =median(y)\)</span></p><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/MSE%20vs%20MAE.webp"alt="MSE vs MAE" /><figcaption aria-hidden="true">MSE vs MAE</figcaption></figure><p>对比两个损失函数，不难发现：</p><ul><li>MSE<ul><li>光滑</li><li>对异常值敏感</li></ul></li><li>MAE<ul><li>分段</li><li>对异常值鲁棒</li></ul></li></ul><p><strong>安斯库姆四重奏 Anscombe'squartet</strong>：有四组数据，它们的均值，方差，协方差都相同，但是分布大相径庭，即可视化很重要</p><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/安斯库姆四重奏.webp"alt="安斯库姆四重奏" /><figcaption aria-hidden="true">安斯库姆四重奏</figcaption></figure><p>Tukey-Mosteller BulgeDiagram：图像向那个方向弯，就使用哪个方向的函数</p><figure><imgsrc="/illustration/UCB%20Data100：数据科学原理与技术/Tukey-Mosteller%20Bulge%20Diagram.webp"alt="Tukey-Mosteller Bulge Diagram" /><figcaption aria-hidden="true">Tukey-Mosteller BulgeDiagram</figcaption></figure><p>多重线性回归：</p><p><span class="math display">\[\hat{y} = \theta_0 + \theta_1 x_1 +\cdots + \theta_p x_p\]</span></p><h1 id="通常最小二乘法-ordinary-least-squares">通常最小二乘法 OrdinaryLeast Squares</h1><p>使用线性代数，期望向量写成：</p><p><span class="math display">\[\hat{Y} = X \theta\]</span></p><p>最小二乘法估计：</p><p><span class="math display">\[R(\theta) = \frac{1}{n} ||Y- X\theta||^2_2\]</span></p><p>通过投影等方法可以解得：</p><p><span class="math display">\[\hat{\theta}=(X^TX)^{-1}X^TY\]</span></p><h1 id="梯度下降-sklearn-gradient-descent-sklearn">梯度下降 sklearnGradient Descent, Sklearn</h1><p>引入线性回归：<code>from sklearn.linear_model import LinearRegression</code></p><p>创建一个模型：<code>model = LinearRegression()</code></p><p>填入模型：<code>model.fit(df[['total_bill']], df['tips'])</code></p><p>预期参数：<code>model.predict(df[['total_bill']])</code></p><p>可以通过：<code>model.intercept_</code>获取截距，<code>model.coef_</code> 获取系数</p><p>多重线性回归同理</p><p>最小化任意一维函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br>minimize(arbitrary, x0 = <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>原理是每一步的都调整新的位置，不断朝下走</p><p><span class="math display">\[x_{i+1} = x_i - \alphaf^\prime(x_i)\]</span></p><p>选择不同的 <span class="math inline">\(\alpha\)</span>以达到最好的效果</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;课程概述-course-overview&quot;&gt;课程概述
        
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://old-driver-zero.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="UC Berkeley" scheme="https://old-driver-zero.github.io/tags/UC-Berkeley/"/>
    
      <category term="数据科学" scheme="https://old-driver-zero.github.io/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 学习笔记</title>
    <link href="https://old-driver-zero.github.io/posts/5dc45f0c.html"/>
    <id>https://old-driver-zero.github.io/posts/5dc45f0c.html</id>
    <published>2023-09-16T02:09:03.934Z</published>
    <updated>2023-09-28T09:11:23.526Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="什么是-jupyter-notebook">什么是 Jupyter Notebook</h1><blockquote><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。——<ahref="https://jupyter-notebook.readthedocs.io/en/stable/notebook.html">JupyterNotebook 官方介绍</a></p></blockquote><p>所以简单来说就是以网页形式打开，可以在其中直接<strong>编写</strong>并运行代码，代码的运行<strong>结果</strong>也会直接显示在代码块下，同时说明文档也可以直接编写在下面，支持markdown<del>增强版博客</del></p><p>组成部分：</p><ul><li>网页应用</li><li>文档</li></ul><h1 id="安装和启动">安装和启动</h1><p>一般搭配 Anaconda 使用，一般来说安装后已经自动安装了 Jupyter Notebook了。若没有，可以手动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install jupyter notebook<br></code></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jupyter notebook<br></code></pre></td></tr></table></figure><p>该命令以默认端口（8888）启动，若被占用，则顺延至 8889等。同时浏览器自动访问该网址</p><p><em>注意：终端<strong>不要关闭</strong>，否则会断开与本地服务器的连接</em></p><p>当然也可以用 <code>--port xxxx</code> 指定 <code>xxxx</code>端口启动，也可以添加 <code>--no-browser</code> 参数不打开浏览器</p><h1 id="设置-jupyter-notebook-文件存放位置">设置 Jupyter Notebook文件存放位置</h1><p>Windows系统的配置文件路径：<code>C:\Users\&lt;user_name&gt;\.jupyter\jupyter_notebook_config.py</code></p><p>将 <code># NotebookApp.notebook_dir</code> 改为<code>NotebookApp.notebook_dir = '目录'</code></p><h1 id="扩展功能">扩展功能</h1><h2 id="关联-jupyter-notebook-和-conda-的环境和包">关联 Jupyter Notebook和 conda 的环境和包</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install nb_conda<br></code></pre></td></tr></table></figure><ul><li>可以在 <code>Conda</code> 类目下对 conda环境和包进行一系列操作。</li><li>可以在笔记本内的 <code>Kernel</code> 类目里的<code>Change kernel</code> 切换内核。</li></ul><p>卸载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">canda remove nb_conda<br></code></pre></td></tr></table></figure><h2 id="nbextensions-丰富功能">Nbextensions 丰富功能</h2><p>安装一个实用的扩展：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install -c conda-forge jupyter_contrib_nbextensions<br></code></pre></td></tr></table></figure><p>导航栏会多出<code>Nbextensions</code>，这个扩展有很多实用的功能，可以根据需要自己选择，这里推荐几个：</p><ul><li><p><code>Table of Contents(2)</code> 可以为 markdown添加目录</p></li><li><p><code>Hinterland</code> 代码补全</p></li></ul><h1 id="两种模式与快捷键">两种模式与快捷键</h1><p><strong>命令模式</strong>：单元格边框为灰色，且左侧边框线为蓝色粗线条。</p><p><strong>编辑模式</strong>：单元格边框和左侧边框线均为绿色。</p><table><colgroup><col style="width: 28%" /><col style="width: 18%" /><col style="width: 28%" /><col style="width: 24%" /></colgroup><thead><tr class="header"><th>快捷键</th><th>功能</th><th>快捷键</th><th>功能</th></tr></thead><tbody><tr class="odd"><td><kbd>Ctrl</kbd> + <kbd>Enter</kbd></td><td>运行当前 cell</td><td><kbd>Shift</kbd> + <kbd>Enter</kbd></td><td>运行当前 cell 并移动到下一个</td></tr><tr class="even"><td><kbd>ESC</kbd></td><td>进入命令模式</td><td><kbd>Enter</kbd></td><td>编辑模式</td></tr><tr class="odd"><td><kbd>a</kbd></td><td>在上方插入一个 cell</td><td><kbd>b</kbd></td><td>在上方插入一个 cell</td></tr><tr class="even"><td><kbd>ddd</kbd></td><td>删除一个 cell</td><td><kbd>z</kbd></td><td>撤销上次 cell 操作</td></tr><tr class="odd"><td><kbd>y</kbd></td><td>将 cell 转为 markdown</td><td><kbd>y</kbd></td><td>将 cell 转为 code</td></tr><tr class="even"><td><kbd>h</kbd></td><td>获取帮助</td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;什么是-jupyter-notebook&quot;&gt;什么是
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://old-driver-zero.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="数据科学" scheme="https://old-driver-zero.github.io/tags/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
      <category term="web" scheme="https://old-driver-zero.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>老顽固，在找我吗？</title>
    <link href="https://old-driver-zero.github.io/posts/106331b4.html"/>
    <id>https://old-driver-zero.github.io/posts/106331b4.html</id>
    <published>2023-09-10T03:05:08.247Z</published>
    <updated>2023-09-10T03:24:56.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>相对于《去月球》留下的深深的遗憾，《寻找天堂》的结局可以说是相当的圆满了。主角经历了一个有遗憾而有幸福的人生，也就是一个平平淡淡的人生，他甚至根本不需要在临终前依靠修改记忆实现什么愿望，因为他一直都有一个陪伴着他的伙伴。</p><p>哪个有孤独的童年的人没有幻想过自己有一个像 Faye那样的伙伴呢，她会鼓励我、引导我、帮助我。让我感触最深的是在山顶告别的那一幕，或许这就是成长的代价，有些事物注定只能陪你到那儿，但是总有一天会再见面的。</p><blockquote><p>老顽固，在找我吗？</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="治愈" scheme="https://old-driver-zero.github.io/tags/%E6%B2%BB%E6%84%88/"/>
    
      <category term="寻找天堂" scheme="https://old-driver-zero.github.io/tags/%E5%AF%BB%E6%89%BE%E5%A4%A9%E5%A0%82/"/>
    
  </entry>
  
  <entry>
    <title>一段灿烂的回忆</title>
    <link href="https://old-driver-zero.github.io/posts/175a8e1.html"/>
    <id>https://old-driver-zero.github.io/posts/175a8e1.html</id>
    <published>2023-09-10T02:22:58.248Z</published>
    <updated>2023-09-10T02:57:45.882Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一个冬日的故事">一个冬日的故事</h1><p>《水仙》是一部比较特别的游戏，忧伤的音乐、狭长的画面、灰白的字幕，仿佛我在看一部电影一样，而且全程没有任何选项，带给我一种无能为力的感觉。而这正是作者想要传达的，被宣判了死亡，到处都是绝望的气息。</p><p>故事也非常简单，两个人相依为命，克服重重困难，逃出医院，最终看到水仙花的故事。未经他人苦，莫劝他人善，我并没有经历过他们的悲惨身世，也没有资格去评判他们的价值观，更不能指责他们缺乏勇气和希望。</p><h1 id="一段灿烂的回忆">一段灿烂的回忆</h1><p>要说全作仅有的阳光的地方，只有两个人一起合照的那段。没有谁关心那层临终病房中的人，他们死了并没有什么奇怪的，可是这一场旅行却让他们留下了自己的痕迹。这段故事永远留在男主心中，还有屏幕前的所有人也一起见证了这一段故事。而不是开头所说的，濑津美只是上万人的统计数字中的一份子。</p><p>也就是说，这并不是一个追求死亡的故事，而是一个向死而生的故事。濑津美对车辆和道路的了如指掌无不透露出她对外面世界的向往，还有第二部中姬子倔强地攀登山路，我当时以为她是要寻死，最终却是向神明献上最真诚的祈祷时，我被震撼到了，她们两个是一样的，她们都找到了生命的意义。</p><h1 id="你希望我拉住你吗">你希望我拉住你吗？</h1><p>过程中濑津美曾多次问男主：“如果我就这样走向大海，你会拉住我吗？”，而男主的回答也从来没有变过：“你希望我拉住你吗？”。这是对“死亡”和“活下去”的思想斗争，女主一开始大概是不清楚自己的心意的，才会多次询问，而旅途的最后她毅然走入海中，则象征着她终于找回了自己的真心。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="水仙" scheme="https://old-driver-zero.github.io/tags/%E6%B0%B4%E4%BB%99/"/>
    
      <category term="死亡" scheme="https://old-driver-zero.github.io/tags/%E6%AD%BB%E4%BA%A1/"/>
    
  </entry>
  
  <entry>
    <title>与光为敌，向神挥刃</title>
    <link href="https://old-driver-zero.github.io/posts/e53204e6.html"/>
    <id>https://old-driver-zero.github.io/posts/e53204e6.html</id>
    <published>2023-09-09T04:54:11.375Z</published>
    <updated>2023-09-09T09:05:58.282Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div id="aplayer-oSEOhviA"class="aplayer aplayer-tag-marker meting-tag-marker"data-id="1309394495" data-server="netease" data-type="song"data-mode="random" data-autoplay="false" data-listmaxheight="340px"data-preload="auto" data-theme="#e3f2f5" data-volume="0.4"data-mutex="true"></div><blockquote><p>我真幸运，刚打完空洞骑士就能玩到丝之歌了。 ——经典中的经典</p></blockquote><h1 id="精巧的地图">精巧的地图</h1><p>我一开始还认为《空洞骑士》只是一个比较小型的游戏，随着探索的一步步深入，和大量谜语人的对白，才发现这是一个广大的世界，我一周目时打的范围甚至不超过全图的十分之一。</p><p>地图设计非常精巧，如很多关卡故意设计地需要获得特定的技能才能进入，这样毫无违和感地引导了玩家的路线。地图之间也不是随意排布的，例如泪水之城之所以一直都在下雨，是因为上方就是蓝湖。</p><p>地图的音乐也非常不错。尤其是当我历经千辛万苦从哪个房间里出来，推开门看到广阔的泪城，听到那段苍凉的旋律时，真的有一种恍如隔世的感觉。还有那座高大的空洞骑士雕像，无一不显示出泪城当年的威严与壮观。还有各具特色的苍绿之径、水晶山、深巢、高塔、蜂巢、下水道、雪山、深渊等，无一不让我印象深刻。</p><h1 id="战斗">战斗</h1><p>战斗一定是这类游戏离不开的优势。尽管小骑士的技能非常少，却能够通过观察BOSS 的战斗方式找出应对的方法，这正是这款游戏战斗的乐趣。</p><p>让我印象最深刻的就是被誉为“新人杀手”的三螳螂了，画面设计非常有压迫感，战斗的节奏也非常紧张，但战斗胜利后三人一齐起立向小骑士鞠躬，同时也是向玩家鞠躬的镜头确实是让我感动。</p><p>“灵魂守护者”的假死也让我吓了一大跳。我当时还寻思这 BOSS怎么这么弱，都已经准备开香槟庆祝了，谁知突然觉醒，尤其是那个把大地砸碎的动作，<del>我可算是体会到补刀的重要性了，</del>实在让人震撼，我终于知道为什么BOSS出场时主角都会有一段时间无法动了，而不是冲上去不讲武德地来一刀。</p><h1 id="人物">人物</h1><p>这里面的角色虽然话不多（除了那个男人），但几乎每一角色的形象都非常鲜明，其中有的故事让我感动至深。</p><h2 id="空洞骑士">空洞骑士</h2><blockquote><p>纪念 空洞骑士 在那高远的黑色穹顶之下。他的牺牲使圣巢永世不衰。</p></blockquote><p>当我第一次在巨大的雕像下看到这句话时，我就怀疑背后有斗争与牺牲。在了解了剧情后，才知道空洞骑士的伟大。无论是小骑士还是空洞骑士还是前辈，他们的身上都背负了太多，他们都是伟大的。</p><blockquote><p>没有可以思考的心智，没有可以屈从的意志，没有为苦难哭泣的声音，无论什么代价都在所不惜，你必须封印在众人梦中散布瘟疫的障目之光，你是容器，你是空洞骑士！</p></blockquote><h2 id="奎若">奎若</h2><blockquote><p>我忘记了所有悲剧，所见皆是奇迹。</p></blockquote><p>奎若一路上经常能看到，仿佛是一路陪伴着我们的朋友，我把他当成一个惺惺相惜的英雄。在与教师的战斗中，他摘下了自己的面具，完成了他的使命。蓝湖是最后一次与他再见，那时的他已经走到了人生的尽头，在这样的一个阶段，说出的这样一句话，颇有英雄迟暮的感觉。我没什么能做的，只能默默地陪他在蓝湖坐一会，陪他度过他人生的最后一程，或许这是他最好的结局了。</p><h2 id="铁匠">铁匠</h2><p>当你做出了一把举世无双的武器，甚至远远超出了自己的认知时，你会有什么感想？你的梦想实现了，你的使命达成了，前方的路该怎么走呢？骨钉匠也面临着一样的问题，所以他的选择居然是让自己被自己制作出的最得意的武器杀死。但我实在不忍心杀他，他追求纯粹，醉心于自己的技艺，但是时候让他走出去，发掘自己的爱好了，为自己的人生找一个新的目标。</p><p>所以“幸福的夫妇”也是他最好的结局了<del>话说这俩不都是男的吗？</del></p><h2 id="芬达哥">芬达哥</h2><blockquote><p>啊——芬达——</p></blockquote><p>作为“永恒五骑士”中唯一存活下来的一位，失去了恋人和同伴，自己对于灾难也无能为力，只能躲在下水道中，一边坚持着自己最后的职责，一边在梦中怀念着伙伴与曾经的光辉岁月。这经历放在任何人身上，孤独都会把他压得喘不过气来。但是，从芬达哥的身上却感受不到任何的悲伤，他总是那么乐观，甚至还把快乐带给他人。他大概非常乐于助人，当小骑士身上散发着他的“英勇的气息”时，不少人都向他伸以援手，表示自己受到过他的帮助。</p><p>芬达哥是一位真正的骑士，也是我最喜欢的角色。</p><h2 id="左特">左特</h2><p>我一周目时做出的最正确的决定就是没有去救他，当时我血量不够了，又没有地图，正四处找椅子存档或找地图商人，所以忙着跑图，没有注意到左特，忽然看到弹出了一个成就，觉得奇怪。后来才发现多亏我平时积善行德，这是上天在保佑我。</p><p>左特是全作最反面的角色了，自大、弱小、吵闹……任何负面的形容词都无法完全形容他，不仅抢走迷妹，还有打不完的关卡，甚至官方还为他做了一个空洞骑士的主题——无尽折磨。<del>来自官方的吐槽</del></p><p><del>无尽折磨中的左特是唯三有小骑士拔刀动画的，其余两个分别是三螳螂和辐光，可见左特的分量</del></p><h2 id="龙牙姐">龙牙姐</h2><p>我初次遇见她的时候误以为是一个BOSS，在她旁边一顿输出，才注意到原来是一个NPC。在小骑士的鼓励下，她终于克服了自己的弱点，决心用勇气面对敌人，虽然她的一个结局让人意难平，但我<del>这么厉害的人</del>一个人就搞定了叛徒领主，她就不用牺牲了。愿她在外面闯荡能够成为一个真正的英雄吧。</p><h2 id="灰色哀悼者">灰色哀悼者</h2><p>送花是个非常折磨的任务，但是他的这一份真情让我感动，所以我一定要去帮他。不过，“花”确实在结局中充当了非常重要的角色，它吸收了黑暗，使圣巢免于被黑暗吞没的命运，或许其象征着希望吧。</p><h2 id="小人物">小人物</h2><p>除了这些在游戏中有重要作用的角色，还有一些对剧情无关紧要的小角色。如果说是那些英雄们让这个世界伟大，那么正是这些不起眼的小人物，才让这个世界如此美好。泪城中的女歌手的歌声给城市带来了生机，勤恳工作的矿工妹给压抑的地道带来了欢乐，还有假骑士为保护同伴们的挺身而出，他们都带给了我遗憾和回忆。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;div
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="银河战士恶魔城" scheme="https://old-driver-zero.github.io/tags/%E9%93%B6%E6%B2%B3%E6%88%98%E5%A3%AB%E6%81%B6%E9%AD%94%E5%9F%8E/"/>
    
      <category term="空洞骑士" scheme="https://old-driver-zero.github.io/tags/%E7%A9%BA%E6%B4%9E%E9%AA%91%E5%A3%AB/"/>
    
  </entry>
  
  <entry>
    <title>但是她对谁都这样</title>
    <link href="https://old-driver-zero.github.io/posts/e9318100.html"/>
    <id>https://old-driver-zero.github.io/posts/e9318100.html</id>
    <published>2023-09-09T04:27:54.920Z</published>
    <updated>2023-09-09T04:53:03.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>但是她对谁都这样</p></blockquote><blockquote><p>可还有谁对你这样</p></blockquote><p>好了，此处已成艺术，无需多言。</p><p><imgsrc="/illustration/Find%20Love%20or%20Die%20Trying/终是活成了自己最鄙视的样子.webp" /></p><p>我一开始认为这只是粗制滥造的普通的游戏而已，通过每天选择不同的女孩，给每个人一个结局，而所谓的电视节目只不过是一个幌子罢了。</p><p>但随着剧情的进行，我逐渐猜到了这是一场阴谋，也猜到了 Kat是双面间谍。可是，当她举着枪对准我的时候，我还是被她深深地感动了。在最后的决战中，我义无反顾地选择了相信她。还有她最后躺在病床上流着泪的深情告白：</p><blockquote><p>我爱你。比你所知的，还要再多一百、一千、一万倍。这辈子，你走到哪，我就跟到哪。今时今日，我很确定我们的前路还有很长。我们还要一起创造更多回忆呢，Kat。</p></blockquote><p>擦了擦屏幕才发现流泪的是我。</p><p><del>当然，这部游戏真正最出圈的地方还是那幅世界名画</del></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="纵使手残仍大爱" scheme="https://old-driver-zero.github.io/tags/%E7%BA%B5%E4%BD%BF%E6%89%8B%E6%AE%8B%E4%BB%8D%E5%A4%A7%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>因为山就在那里</title>
    <link href="https://old-driver-zero.github.io/posts/1743dad6.html"/>
    <id>https://old-driver-zero.github.io/posts/1743dad6.html</id>
    <published>2023-09-09T02:30:40.899Z</published>
    <updated>2023-09-09T04:54:19.772Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="为什么要玩蔚蓝">为什么要玩《蔚蓝》</h1><p>“为什么你要去爬珠穆朗玛峰？”“因为山就在那里。”这是一段几乎已经被用烂了的对话，但放在《蔚蓝》上竟莫名的合适。这是一款难度非常高的游戏，没有像《奥日》系列精美的画面，只有简陋而单调的像素；也没有像《空洞骑士》那样深刻的剧情和世界观，只有一个普通人不明所以的登山目标。</p><p>就是这么一部单调、乏味的作品，却让无数人着迷，就是这么一段朴素的剧情，却让无数人流泪。因为倘若用心游玩了，就会发现这款游戏的设计非常精巧，每一个关卡的设计都恰到好处，搭配上音乐，带给人视听享受。</p><h1 id="迷茫的启程">迷茫的启程</h1><p>主角为什么要启程，她一开始并没有答案，事实上，登山之旅也是她寻找的过程。其实很多事情都是这样，我并不知道自己为什么要出发，但是当我醒来时，却发现自己已在路上。我只是觉得前方一定有什么在吸引着我，不知不觉想要前进，也像玩这款游戏的过程，我不知道登上山顶究竟意味着什么，但我知道一定会收获一些东西。所以，就在这启程的一刻，我就已经和主角融为一体了，我们都有相同的感受，所以该游戏很有代入感。</p><h1 id="折磨与摧残">折磨与摧残</h1><p>在一个地方死了不知多少遍已经无需多言，实力不够只能放过眼前的草莓的事也常有，仿佛象征着人生中的挫折与无奈。当主角终于快要登顶时，却遭到另一个自己的阻挠，又重重地跌落谷底，在那一刻我的心也跟着大起大落。但是，谷底别样的风景又让我赞叹，仿佛忘记了刚才的伤痛，转而赞美这个世界的伟大。其实最伟大的不是谷底的重重障碍，而是一次次失败但始终不放弃，最终飞越阻挠的你的矫健身姿。</p><h1 id="与自己和解">与自己和解</h1><p>每个人心中都有一个让自己不太满意的自己，在自己看来，他象征着邪恶，是一定要被消灭的。事实上也确实如此，他是最大的敌人，会对你的行动造成巨大的影响。主角也是一开始被那个黑化的自己追杀，几次死里逃生。然而，最后她解救了那个自己，并与她齐心协力，一起登上山顶。</p><p>的确，我们都受很多宗教的影响太深了，总是下意识地认为那个自己是邪恶的，而邪恶的是必然要驱逐的，只有“战胜”了自己，才能取得成功。所以，我们总是竭尽全力与那个形影不离的阴影做斗争，很累，到头来反而一无所获，从而陷入到对自己的怀疑中，甚至<strong>抑郁</strong>。没错，《蔚蓝》就是讲述一个抑郁症患者的故事，她孤独而无助，迷茫而阴暗，一路上碰到了几个交流还不错的朋友，却又路不同而很快别离。她看到了有人因压力过大而暴走，也亲身体验了自己的求生本能。最终她终于明白那个自己其实也非常可爱，所谓的邪恶不过是自己臆想出来的，所以她选择了与自己和解，最终合力登上山顶。</p><p>这是一个缺乏信任的时代，在熟人也会陷害你的情况下，最可靠的伙伴是自己。我们无法左脚踩右脚上天，但可以相互加油鼓劲，这似乎是成为“高人”的捷径。</p><p>所以说回那个我们出发时的疑问：“你为什么要登山？”“因为山就在那里”</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1
        
      
    
    </summary>
    
    
      <category term="游戏人生" scheme="https://old-driver-zero.github.io/categories/%E6%B8%B8%E6%88%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="纵使手残仍大爱" scheme="https://old-driver-zero.github.io/tags/%E7%BA%B5%E4%BD%BF%E6%89%8B%E6%AE%8B%E4%BB%8D%E5%A4%A7%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>GDB 学习笔记</title>
    <link href="https://old-driver-zero.github.io/posts/1be398e4.html"/>
    <id>https://old-driver-zero.github.io/posts/1be398e4.html</id>
    <published>2023-09-08T11:41:09.349Z</published>
    <updated>2023-09-09T02:13:04.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="简介">简介</h1><p>gdb 是 GNU 下的一个调试工具，相较于图形化界面有一些优势</p><h1 id="使用">使用</h1><p>必须在编译时添加 <code>-g</code> 命令将调试信息添加到可执行文件中，如<code>gcc -g hello.c -o hello</code></p><p>启动：<code>gdb programName</code></p><p>使用 <code>help</code> 查看所有命令</p><h1 id="断点-breakpoint">断点 BreakPoint</h1><p><code>break</code> 或<code>b</code>，所有命令通常只需要打出开头的几个字符就行了，在指定位置停下</p><ul><li>函数：<code>b func</code>，<code>func</code> 为函数名</li><li>行号：<code>break lineNum</code></li><li>内存地址：<code>break *address</code></li></ul><p>查看断点：<code>info breakpoints</code>，简写为 <code>i b</code></p><h1 id="观察点-watchpoint">观察点 WatchPoint</h1><p>如果某个<strong>变量</strong>或<strong>表达式</strong>值变化了，则停下程序</p><ul><li><p><code>watch expr</code>：当 expr 改变时，停下</p></li><li><p><code>rwatch expr</code>：若 expr 被读时，停止程序</p></li><li><p><code>awatch expr</code>：当 expr 被读写时，停住</p></li><li><p><code>info watchpoints</code>：查看观测点信息</p></li></ul><p>清理停止点：</p><ul><li><code>clear</code>：清理所有已定义的停止点</li><li><code>clear func</code>：清理指定函数中的所有停止点</li><li><code>clear lineNum</code>：清理指定行号上的所有停止点</li></ul><p>删除停止点：<code>delete 断点号</code></p><p>也可以使用 <code>disable</code> 禁用某断点，再使用<code>enable</code> 启用</p><h1 id="恢复程序运行与单步调试">恢复程序运行与单步调试</h1><p>恢复程序运行直到结束或下一个断点到来：<code>continue [忽略断点数]</code>，可以简写为<code>c</code></p><p><code>step</code> 能进入函数，<code>next</code> 一条条执行语句</p><h1 id="查看运行时数据">查看运行时数据</h1><p><code>print /f exp</code>，<code>/f</code> 指输出的格式</p><h1 id="查看内存">查看内存</h1><p><code>x /nfu addr</code>，其中 <code>n</code>表示显示内存的长度，<code>f</code> 表示显示的格式，<code>u</code>表示请求的字节数</p><h1 id="自动显示">自动显示</h1><p><code>display exp</code>：当程序停止或单步运行时，指定的表达式值会自动显示</p><h1 id="修改变量值">修改变量值</h1><p><code>set (varName = value)</code> 将变量名为 <code>valName</code>的变量的值设置为 <code>value</code></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;gdb 是 GNU
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://old-driver-zero.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="GDB" scheme="https://old-driver-zero.github.io/tags/GDB/"/>
    
      <category term="debug" scheme="https://old-driver-zero.github.io/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>CMU CS15-213：计算机系统导论</title>
    <link href="https://old-driver-zero.github.io/posts/836ea9bd.html"/>
    <id>https://old-driver-zero.github.io/posts/836ea9bd.html</id>
    <published>2023-09-06T08:44:28.073Z</published>
    <updated>2023-10-14T07:25:19.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="比特字节和整数-bits-bytes-and-integers">比特，字节和整数 Bits,Bytes, and Integers</h1><p>布尔代数</p><p>位移操作：</p><ul><li>左移 <code>x &lt;&lt; y</code>：丢弃左边多余的位，右边补 0</li><li>右移 <code>x &gt;&gt; y</code>：<ul><li>逻辑右移：左边补 0</li><li>算术右移：左边重复最高位</li><li>c 语言默认为算术右移，Java 用 <code>&gt;&gt;&gt;</code>区分出逻辑右移</li></ul></li><li>当位移长度 &lt; 0 或 &gt; 字长时，为定义</li></ul><p>数字范围：</p><ul><li>无符号：UMin = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.079ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 5338.9 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1833.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(3500.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mn" transform="translate(4838.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，UMax= <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="16.167ex" height="1.715ex" role="img" focusable="false" viewBox="0 -676.2 7146 758.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g><g data-mml-node="mo" transform="translate(1311.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2311.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3089.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4145.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5923.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mn" transform="translate(6368,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container></span></li><li>补码：TMin = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="16.075ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 7105.2 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3048.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4104.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5882.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mn" transform="translate(6327.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container></span>，TMax = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="18.212ex" height="2.072ex" role="img" focusable="false" viewBox="0 -833.9 8049.6 915.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2215.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3215.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3993.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5049,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(6827,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mn" transform="translate(7271.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container></span></li></ul><p>其它值：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.697ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 5612.2 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1555.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2611.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1000,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(4389.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mn" transform="translate(4834.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container></span></p><p>编码整数：</p><ul><li>无符号：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="21.337ex" height="2.922ex" role="img" focusable="false" viewBox="0 -948 9431.1 1291.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(1259,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(2026,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2415,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3933.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(4989.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(7705.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(8604.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span></li><li>补码：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="34.902ex" height="2.922ex" role="img" focusable="false" viewBox="0 -948 15426.5 1291.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(759,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(1259,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(1963,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2352,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3204,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3870.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4926.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5704.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="msup" transform="translate(7769.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9984.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(10984.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msub" transform="translate(13700.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msup" transform="translate(14599.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>，其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.471ex;" xmlns="http://www.w3.org/2000/svg" width="4.672ex" height="1.471ex" role="img" focusable="false" viewBox="0 -442 2065 650"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1494,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container></span> 表示的是符号位，0 是非负数，1是负数</li></ul><p>观察可以发现：</p><ul><li>|TMin| = TMax + 1</li><li>UMax = 2 * TMAX + 1</li></ul><p>两者之间转换时二进制表示不变，而是更换了解码方式，故</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/无符号和有符号的转换.webp"></p><p>在无符号和有符号整数同时出现在一个表达式（包括比较操作）时，有符号值隐式转化为无符号值</p><p>扩展：将 w 位的整数保持大小不变，扩展到 w + k 位</p><ul><li><p>无符号：加 0</p></li><li><p>有符号：重复 k 次符号位</p></li></ul><p>截断：</p><ul><li>无符号：模运算</li><li>有符号：类似于模运算</li></ul><p>无符号加法：忽略溢出，相当于 mod <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.464ex" height="1.53ex" role="img" focusable="false" viewBox="0 -676.2 1089.3 676.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g></g></g></g></svg></mjx-container></span></p><p>有符号加法溢出会由正数变成负数，负数变成正数</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/有符号整数加法.webp"></p><p>乘法同样只留下了 w 位，忽略多余的位</p><p>无符号：</p><ul><li><p>2 的次方乘法和位移：<code>u &lt;&lt; k</code> 相当于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.583ex" height="1.956ex" role="img" focusable="false" viewBox="0 -853.7 2467.8 864.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(1516.4,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span></p></li><li><p>2 的次方除法和位移：<code>u &gt;&gt; k</code> 相当于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.587ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2911.4 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="230A" d="M174 734Q174 735 175 737T177 740T180 744T184 747T189 749T196 750Q206 748 214 735V-210H310H373Q401 -210 411 -213T422 -230T411 -247T369 -251Q362 -251 338 -251T298 -250H190Q178 -246 174 -234V734Z"></path></g><g data-mml-node="mi" transform="translate(444,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1016,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1516,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(2467.4,0)"><path data-c="230B" d="M229 734Q229 735 230 737T232 740T235 744T239 747T244 749T251 750Q262 748 269 735V-235Q266 -240 256 -249L147 -250H77Q43 -250 32 -247T21 -230T32 -213T72 -209Q79 -209 99 -209T133 -210H229V734Z"></path></g></g></g></svg></mjx-container></span>，使用逻辑位移</p></li></ul><p>每个机器都有一个给定的<strong>字长 wordsize</strong>，表示处理的最大内存范围，现在多为 64 位</p><p>多字节的单词在内存中的存放顺序分为大端 Big endian和小端，名称来自格列佛游记</p><ul><li>大端（Sun，Internet）：最低位内存地址最大</li><li>小端（x86，ARM）：最低位内存地址最小</li></ul><h1 id="浮点-floating-point">浮点 Floating Point</h1><p>浮点右边的部分表示 2 的分数次幂</p><p>可以发现，只有形式为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.578ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 2023.4 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(1072,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>的数字可以精确表示</p><p>数字形式：</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.509ex" height="2.588ex" role="img" focusable="false" viewBox="0 -893.8 4644.9 1143.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1167,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(1667,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mi" transform="translate(2470.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="msup" transform="translate(3521.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,413) scale(0.707)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></g></svg></mjx-container></span></p><ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.023ex" role="img" focusable="false" viewBox="0 -442 469 452"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container></span>决定数字是正数还是负数（所以会区分 +0 和 -0），且溢出不会变化符号</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container></span> 是<strong>尾码significand</strong>，<em>通常</em>是表示 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.047ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3556.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(1556,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2000.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(3278.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 的分数值</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.729ex" height="1.538ex" role="img" focusable="false" viewBox="0 -680 764 680"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g></g></svg></mjx-container></span> 是二的幂次的值</li></ul><p>编码：</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/浮点.webp"></p><p>注意：</p><ul><li>exp 编码 E，但与 E 有一些不同</li><li>frac 编码 M，但与 M 有一些不同</li></ul><p>单精度各部分的长度为：1 - 8 - 23，双精度：1 - 11 - 52</p><p>正常值（exp != 000…0 且 exp != 111…1）：</p><ul><li>阶码部分：E = exp - Bias，其中 Bias = <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.094ex" height="2.117ex" role="img" focusable="false" viewBox="0 -853.7 3577.5 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2077.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3077.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>，其中 k 是指数位数（单精度bias 为 127）</li><li>尾码部分有隐藏的 1：M = 1.xxx…x，相当于白嫖了一个位</li></ul><p>非规格化：（exp = 000…0）</p><ul><li>指数：E = 1 - Bias</li><li>尾码部分有隐藏的 0：M = 0.xxx…x</li><li>exp = 000…0，frac != 000…0 时表示接近 0 的数字，等间距</li></ul><p>特殊的值（exp = 111…1）</p><ul><li>exp = 111…1，frac = 000…0：无穷大或操作溢出，可正可负</li><li>exp = 111…1，frac = 000…0：没有数字 NaN</li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/数轴上的浮点.webp" alt="数轴上的浮点"><figcaption aria-hidden="true">数轴上的浮点</figcaption></figure><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/动态范围.webp"></p><p>从这张表中可以看出为什么这么设计，实际上规格化和非规格化之间既实现了平滑过渡，又充分利用了每一位</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/浮点数在数轴上1.webp"></p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/浮点数在数轴上2.webp"></p><p>结合两张图，不难看出浮点数的分布</p><p>在比较浮点时</p><ul><li>先比较符号位</li><li>考虑 -0 = +0</li><li>考虑 NaN</li><li>其余同无符号整数</li></ul><p>浮点计算：</p><ul><li>先计算确切值</li><li>将其化为要求的精度</li></ul><p><strong>圆整rounding</strong>：默认为向最近的偶数取整，这样做没有偏向</p><p>浮点的乘法：</p><ul><li>符号：s1 ^ s2</li><li>尾码：M1 * M2</li><li>指数：E1 + E2</li><li>如果 M &gt;= 2，右移 M，增加 E</li><li>溢出</li><li>round M 以填入 frac 精度</li></ul><p>FP 加法/乘法的性质：</p><ul><li>可交换，但不可结合（尤其是大数和小数之间的运算）</li><li>几乎可以单调（除了溢出和 NaN）</li></ul><h1 id="机器层次编程-i基础-machine-level-programming-i-basics">机器层次编程I：基础 Machine-Level Programming I: Basics</h1><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/C语言编译流程.webp"></p><p>反汇编：<code>objdump -d sum</code></p><p>x86-64 有 16 个寄存器</p><table><thead><tr class="header"><th>%rax</th><th>%rbx</th><th>%rcx</th><th>%rdx</th></tr></thead><tbody><tr class="odd"><td>%rsi</td><td>%rdi</td><td>%rsp</td><td>%rbp</td></tr><tr class="even"><td>%r8</td><td>%r9</td><td>%r10</td><td>%r11</td></tr><tr class="odd"><td>%r12</td><td>%r13</td><td>%r14</td><td>%r15</td></tr></tbody></table><p>因为历史原因，<code>r</code> 代表 64 位，<code>e</code> 代表 32位，如 <code>%rax</code> 的另一个名字是 <code>%eax</code>，其只使用<code>%rax</code> 的低 32 位</p><p>移动数据：<code>movq Source, Dest:</code></p><ul><li><strong>立即</strong>：整数常数，如<code>$0x400</code>、<code>$-533</code></li><li><strong>寄存器</strong>：如 <code>%rax</code></li><li><strong>内存</strong>：用括号包围寄存器，如<code>(%rax)</code>，表示 Mem[%rax]</li><li>不能操作两个内存</li></ul><p>内存寻址的一般模式：<code>D(Rb, Ri, S)</code> 表示<code>Mem[Reg[Rb] + S*Reg[Ri] + D]</code></p><ul><li><code>D</code>：偏移常数字节</li><li><code>Rb</code>：基本寄存器</li><li><code>Ri</code>：索引寄存器</li><li><code>S</code>：缩放 1，2，4，8 倍</li></ul><p><code>leaq</code> 指令可以提供一个简单的计算方式，如<code>leaq (%rdi, %rdi, 2), %rax</code> 计算了 <code>3 * %rdi</code>并保存到 <code>%rax</code> 中</p><p>还有一些算术操作，注意操作 <code>op</code> 是<code>dest = dest op src</code>，这种写法是 ATT 写法，而微软和 Intel的写法是相反的</p><p>二元指令：</p><table><thead><tr class="header"><th>名字</th><th>表示</th><th>名字</th><th>表示</th></tr></thead><tbody><tr class="odd"><td><code>addq</code></td><td>+</td><td><code>subq</code></td><td>-</td></tr><tr class="even"><td><code>imulq</code></td><td>*</td><td><code>salq</code> / <code>shlq</code></td><td>&lt;&lt;</td></tr><tr class="odd"><td><code>sarq</code></td><td>算术 &gt;&gt;</td><td><code>shrq</code></td><td>逻辑 &gt;&gt;</td></tr><tr class="even"><td><code>xorq</code></td><td>^</td><td><code>andq</code></td><td>&amp;</td></tr><tr class="odd"><td><code>orq</code></td><td>|</td><td></td><td></td></tr></tbody></table><p>一元指令：</p><table><thead><tr class="header"><th>名字</th><th>表示</th><th>名字</th><th>表示</th></tr></thead><tbody><tr class="odd"><td><code>incq</code></td><td>+1</td><td><code>decq</code></td><td>-1</td></tr><tr class="even"><td><code>negq</code></td><td>-</td><td><code>notq</code></td><td>~</td></tr></tbody></table><h1 id="机器层次编程-ii控制-machine-level-programming-ii-control">机器层次编程II：控制 Machine-Level Programming II: Control</h1><p>当前执行的程序的信息：</p><ul><li>临时数据：%rax…</li><li>运行栈的位置：%rsp</li><li>当前代码控制点的位置：%rip…</li><li>最近 test 的状态：CF，ZF，SF，OF</li></ul><p>单 bit 寄存器：</p><ul><li>CF：进位（无符号）</li><li>SF：符号</li><li>ZF：零</li><li>OF：溢出（有符号）</li></ul><p>显示设置这些位：<code>testq src2, src1</code>，相当于计算<code>a &amp; b</code> 但没有指定目的地</p><p>setX 指令：基于条件代码设置目标的最低字节是 0 还是 1，不改变其它 7个字节</p><ul><li>包括 <code>sete</code>，<code>setg</code>，…，注意 <code>seta</code>是无符号整数的 &gt;，<code>setb</code> 是无符号整数的 &lt;，而<code>setg</code> 是有符号整数的 &gt;</li></ul><p><code>movzbl</code> 将 32 位的数复制到 64 位的 dest 中，并将剩余 32位用 0 补齐，当然还有其他字节之间的数据移动 + 填充的指令</p><p>jX 指令：基于条件代码跳转到代码的不同地方，包括<code>jmp</code>，<code>jge</code> 等</p><p>条件表达式翻译（使用分支）：<code>val =  Test ? Then_Expr : Else_Expr</code>转为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ntest = !Test;<br><span class="hljs-keyword">if</span> (ntest) <span class="hljs-keyword">goto</span> Else;<br>val = Then_Expr;<br>    <span class="hljs-keyword">goto</span> Done;<br>Else:<br>val = Else_Expr;<br>Done:<br>...<br></code></pre></td></tr></table></figure><p>流水线：预测两个分支哪个更有可能发生，在判断条件时提前计算出该分支的结果</p><p><code>do-while</code> 比较简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">loop:<br>body<br>    <span class="hljs-title function_">if</span> <span class="hljs-params">(Test)</span><br>        <span class="hljs-keyword">goto</span> loop<br></code></pre></td></tr></table></figure><p><code>while</code> 有两种方式实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 方法 1：跳转到中间的方法</span><br><span class="hljs-keyword">goto</span> test;<br>loop:<br>Body<br>test:<br><span class="hljs-keyword">if</span> (Test)<br>        <span class="hljs-keyword">goto</span> loop;<br>done:<br><br><span class="hljs-comment">// 方法 2：转化为 do-while</span><br><span class="hljs-keyword">if</span> (!Test)<br>        <span class="hljs-keyword">goto</span> done;<br>loop:<br>Body<br>    <span class="hljs-title function_">if</span> <span class="hljs-params">(Test)</span><br>        <span class="hljs-keyword">goto</span> loop;<br>done:<br></code></pre></td></tr></table></figure><p><code>for</code> 转化为 <code>while</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">Init;<br><span class="hljs-keyword">while</span> (Test) {<br>    Body<br>    Update;<br>}<br></code></pre></td></tr></table></figure><p><code>switch</code> 语句相对于多重 if 的好处是创建了一张 Jump表，能够快速定位到对应的代码块中，而不是依次遍历，这张表由编译器生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.L4<br>.quad.L8# x = 0<br>.quad.L3# x = 1<br>.quad.L5# x = 2<br>.quad.L9# x = 3<br>.quad.L8# x = 4<br>.quad.L7# x = 5<br>.quad.L7# x = 6<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">switch_eg:<br>movq%rdx, %rcx<br>cmpq$6, %rdi# x: 6<br>ja.L8# 使用默认<br>jmp* .L4(, %rdi, 8) # goto *JTab[x]<br></code></pre></td></tr></table></figure><p>如果 switch 的分支范围特别大，如只有 0 和 1000，则会建立一个 if-else树</p><h1 id="机器层次编程-iii程序-machine-level-programming-iii-procedures">机器层次编程III：程序 Machine-Level Programming III: Procedures</h1><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/栈.webp" alt="x86的栈"><figcaption aria-hidden="true">x86的栈</figcaption></figure><p>注意这里的栈口朝下，添加元素时栈顶的地址减小</p><p><code>pushq Src</code></p><ul><li>获取 <code>Src</code> 处的操作数</li><li>将 <code>%rsp</code> 减少 8</li><li>在 <code>%rsp</code> 的地址处写操作数</li></ul><p><code>popq Dest</code></p><ul><li>读 <code>%rsp</code> 所给地址处的值</li><li>将 <code>%rsp</code> 增加 8</li><li>在 <code>Dest</code>（必须是寄存器）处存放值</li></ul><p>过程控制流：</p><ul><li>调用：<code>call label</code><ul><li>将返回地址放入栈中</li><li>跳转到 label</li></ul></li><li>返回：<code>ret</code><ul><li>从栈中 pop 地址</li><li>跳到该地址</li></ul></li></ul><p>数据流：</p><ul><li>前 6 个参数放到<code>%rdi</code>、<code>%rsi</code>、<code>rdx</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>，多出来的放到栈中</li><li>返回值在 <code>%rax</code> 中</li></ul><p>本地数据管理：栈在<strong>栈帧 frame</strong> 中分配</p><p>frame 内容：</p><ul><li>返回信息</li><li>本地存储</li><li>临时存储</li></ul><p>当进入程序时建立，返回时释放</p><p>寄存器保存惯例：</p><ul><li>caller：在 call 之前在它的 frame 中保存临时变量</li><li>callee：在使用之前它的 frame 中保存临时变量，在返回 caller之前恢复</li></ul><p>该方法对于递归和相互调用都有效</p><h1 id="机器层次编程-iv数据-machine-level-programming-iv-data">机器层次编程IV：数据 Machine-Level Programming IV: Data</h1><p>数组 <code>T A[L]</code>：在内存中连续分配 <code>L * sizeof(T)</code>个字节的区域</p><p>索引数组 <code>(%rdi, %rsi, 4)</code></p><ul><li><code>%rdi</code> 是数组名地址</li><li><code>%rsi</code> 是索引</li><li><code>4</code> 是每个基本元素的字节数</li></ul><p>多维数组 <code>A[i][j]</code> 的类型是 <code>T</code>，该类型需要<code>K</code> 字节，故地址 <code>A + (i * C  + j) * K</code></p><p>注意对于一个已知大小的矩阵数组（如 <code>16 x 16</code>），则只需通过<code>salq $6, %rsi</code> 移动获得索引，而如果编译时未知维度（如<code>n x n</code>），则使用乘法 <code>imulq %rdx, %rdi</code>获得索引</p><p>结构体要对齐数据：</p><ul><li>原始数据类型需要 K 字节，则其地址必须是 K 的整数倍</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/数据对齐1.webp"></p><ul><li>最大的对齐需要 K，则整个结构体必须是 K 的整数倍</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/数据对齐2.webp"></p><p>为了节省空间，可以把大的数据类型放前面，这种贪心策略是最优的</p><p>对于浮点数，用 XMM0-15的寄存器存储和传递参数，有专门的浮点运算指令</p><h1 id="机器层次编程-v进阶主题-machine-level-programming-v-advanced-topics">机器层次编程V：进阶主题 Machine-Level Programming V: Advanced Topics</h1><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/内存布局.webp" alt="内存布局"><figcaption aria-hidden="true">内存布局</figcaption></figure><p>当堆中需求的内存过大时，会从上面往下开辟堆空间</p><p>缓冲区溢出，如 <code>gets</code>，可能覆盖下面的 <code>ret</code>命令，使其跳转到自己想要执行的程序</p><p><strong>蠕虫 Worm</strong>：</p><ul><li>可以自己运行</li><li>可以向其它电脑复制一份完全工作的自己</li></ul><p><strong>病毒 Virus</strong>：</p><ul><li>把自己添加到其它程序中</li><li>不能独立运行</li></ul><p>解决方法：</p><ul><li>避免代码中的溢出问题，如使用 <code>fgets</code> 代替<code>gets</code></li><li>系统级别的防护，如随机化栈的偏移，给不同的段加上可读、可写、可执行的权限</li><li>使用金丝雀，即在缓冲区中放上一个随机的数，检查执行完函数后改数字是否改变</li></ul><p>联合体 Union 是将不同的类型合并占用</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/union.webp"></p><h1 id="程序优化-program-optimization">程序优化 ProgramOptimization</h1><p>通用方法：</p><p>代码移动：减少计算次数，尤其是在循环中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> j;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>    a[n*i+j] = b[j];<br><br><span class="hljs-comment">// 改为</span><br><span class="hljs-type">long</span> j;<br><span class="hljs-type">int</span> ni = n * i;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>    a[ni+j] = b[j];<br></code></pre></td></tr></table></figure><p>事实上，如果使用了 <code>-O1</code>优化，则编译生成了代码就使用了类似的原理</p><p>将花费多的操作换成更简单的，如将 <code>*4</code> 换成<code>&lt;&lt;2</code></p><p>共享共同的子表达式，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">(i<span class="hljs-number">-1</span>)*n + j;<br>(i+<span class="hljs-number">1</span>)*n + j;<br>i*n + j<span class="hljs-number">-1</span>;<br>i*n + j+<span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 改成</span><br><span class="hljs-type">long</span> inj = i*n + j;<br>inj - n;<br>inj + n;<br>inj - <span class="hljs-number">1</span>;<br>inj + <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>过程调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> i;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(s); i++)<br>    <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">'A'</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">'Z'</span>)<br>        s[i] -= (<span class="hljs-string">'A'</span> - <span class="hljs-string">'a'</span>);<br></code></pre></td></tr></table></figure><p>该算法是二次的，因为重复调用了<code>strlen(s)</code>，这个方法是线性的，所以应该改成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> i;<br><span class="hljs-type">size_t</span> len = <span class="hljs-built_in">strlen</span>(s);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    <span class="hljs-keyword">if</span> (s[i] &gt;= <span class="hljs-string">'A'</span> &amp;&amp; s[i] &lt;= <span class="hljs-string">'Z'</span>)<br>        s[i] -= (<span class="hljs-string">'A'</span> - <span class="hljs-string">'a'</span>);<br></code></pre></td></tr></table></figure><p>而编译器一般不会优化这点，是因为</p><ul><li>过程可能有副作用</li><li>函数可能会对给定参数返回不同的值（修改了 <code>s[i]</code>）</li></ul><p>解决方法：</p><ul><li>使用<strong>内联 inline</strong> 函数（gcc -O1会这么做）（只能在单个文件中）</li><li>手动移动代码</li></ul><p>内存很重要：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>    b[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        b[i] += a[i*n + j];<br>}<br></code></pre></td></tr></table></figure><p>从汇编代码中可以看出，编译器在每次循环中都从内存中取出<code>b[i]</code> 放到寄存器中，计算完再放回去，因为其无法确定修改了<code>b[i]</code> 会不会影响<code>a[i]</code>，即两个数组使用了相同的内存。故应修改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>    <span class="hljs-type">double</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>        val += a[i*n + j];<br>    b[i] = val;<br>}<br></code></pre></td></tr></table></figure><p><strong>每个元素的循环 Cycles Per Element(CPE)</strong>：用来表达对list 的效率</p><p>T = CPE*n + Overhead</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">combine1</span><span class="hljs-params">(vec_ptr v, <span class="hljs-type">data_t</span> *dest)</span> {<br>    <span class="hljs-type">long</span> <span class="hljs-type">int</span> i;<br>    *dest = IDENT;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; vec_length(v); i++) {<br>        <span class="hljs-type">data_t</span> val;<br>        get_vec_element(v, i, &amp;val);<br>        *dest = *dest OP val;<br>    }<br>}<br></code></pre></td></tr></table></figure><p>基础的优化：</p><ul><li>减少对 <code>vec_length(v)</code> 的调用</li><li>避免在每轮循环中 <code>get_vec_element</code> 检查越界</li><li>临时计算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">combine4</span><span class="hljs-params">(vec_ptr v, <span class="hljs-type">data_t</span> *dest)</span> {<br>    <span class="hljs-type">long</span> i;<br>    <span class="hljs-type">long</span> length = vec_length(v);<br>    <span class="hljs-type">data_t</span> *d = get_vec_start(v);<br>    <span class="hljs-type">data_t</span> t = IDENT;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length; i++)<br>        t = t OP d[i];<br>    *dest = t;<br>}<br></code></pre></td></tr></table></figure><p>该优化立刻提升了许多倍速度，但似乎受到了一些限制，原因是 CPU在执行每个操作时都有“读取-计算-存入”的操作，每个阶段都会花费一些时间</p><p>很多现代的 CPU 都支持<strong>流水线pipeline</strong>，即在一个循环中同时处理多条指令，基本思想是在某计算执行到stage2 时，执行下一个不依赖于该指令结果的指令于 stage1，以此类推</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/combine4.webp" alt="combine4"><figcaption aria-hidden="true">combine4</figcaption></figure><p>效率由延迟决定</p><p>循环展开（2*1）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> limit = length - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; limit; i += <span class="hljs-number">2</span>)<br>    x = x (d[i] OP d[i+<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">for</span> (; i &lt; length; i++)<br>    x = x OP d[i];<br>*dest = x;<br></code></pre></td></tr></table></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/循环展开（2x1）.webp" alt="循环展开（2x1）"><figcaption aria-hidden="true">循环展开（2x1）</figcaption></figure><p>可以发现延迟短了一半</p><p>另一种展开方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">data_t</span> x0 = IDENT;<br><span class="hljs-type">data_t</span> x1 = IDENT;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; limit; i += <span class="hljs-number">2</span>) {<br>    x0 = x0 OP d[i];<br>    x1 = x1 OP d[i+<span class="hljs-number">1</span>];<br>}<br><span class="hljs-keyword">for</span> (; i &lt; length; i++)<br>    x0 = x0 OP d[i];<br>*dest = x0 OP x1;<br></code></pre></td></tr></table></figure><p>如果使用计算浮点数的硬件，可以一次计算多个整数的加法或乘法，且 ymm寄存器通常并不在使用</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/SIMD操作.webp" alt="SIMD操作"><figcaption aria-hidden="true">SIMD操作</figcaption></figure><p>对于分支，会猜测执行哪个分支，并优先执行该分支的内容，正确率&gt;90%</p><h1 id="内存层次结构-the-memory-hierarchy">内存层次结构 The MemoryHierarchy</h1><p>内存有两类：</p><ul><li>SRAM（较快、贵，通常用于 cache）</li><li>DRAM（比 SRAM 慢、便宜，用于主要的内存、frame buffer）</li></ul><p>这两者断点都会丢失消息</p><p>非易失性 memory：</p><ul><li>ROM：只读存储器</li><li>PROM：可编程 ROM</li><li>EPROM：可大容量擦除 PROM</li><li>EEPROM：电子 EPROM</li><li>闪存 EEPROMs：部分（block 级）可删除</li><li>通常用于磁盘</li></ul><p><strong>总线 bus</strong>是一堆能传递地址、数据、控制信号的线，被多个设备共用</p><ul><li><strong>磁盘 disk</strong> 由<strong>盘片 platters</strong>组成，每个有两个<strong>表面 surfaces</strong></li><li>每个 surface 由多个叫<strong>磁道 tracks</strong> 的同心圆组成</li><li>每个 track 由被<strong>空隙 gaps</strong> 分割的<strong>扇区sectors</strong></li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/磁盘几何结构.webp" alt="磁盘几何结构"><figcaption aria-hidden="true">磁盘几何结构</figcaption></figure><p>从多个 platter 来看，多个对齐的 track 形成一个圆柱</p><p>磁盘容量 = (# bytes/sector) * (avg. # sectors/tracks) * (#tracks/surfaces) * (# surfaces/platter) * (platters/disk)</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/磁盘操作.webp" alt="磁盘操作"><figcaption aria-hidden="true">磁盘操作</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/磁盘访问.webp" alt="磁盘访问"><figcaption aria-hidden="true">磁盘访问</figcaption></figure><p>Taccess = Tavg seek + Tavg rotation + Tavg transfer</p><p>其中 Tavg seek被物理因素限制，无法提升，其余两个可以通过磁盘转速提升</p><p>逻辑硬盘块：</p><ul><li>硬件设备硬盘控制器将逻辑块（0,1,2…）映射到实际扇区中</li><li>有一些备用圆柱面，当一些扇区损坏时，可以将损坏扇区的逻辑块映射给备用柱面，实现硬盘坏了但没有完全坏</li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/IO总线.webp" alt="IO总线"><figcaption aria-hidden="true">IO总线</figcaption></figure><p><strong>固态硬盘 Solid State Disk(SSDs)</strong></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/固态硬盘.webp" alt="固态硬盘"><figcaption aria-hidden="true">固态硬盘</figcaption></figure><ul><li>页：512KB 到 4KB，块：32 到 128 页</li><li>必须以页为单位读写数据</li><li>只有在整个块被擦除时，页才能被写入</li><li>一个块在大约 100000 次写入后失效</li></ul><p>所以顺序读写会比随机读写快很多</p><p>我们可以观察到，SRAM,DRAM,SSD,Disk的速度有显著的差距（价格也是），为了以更低的价格获得更快的速度，需要架起桥梁</p><p><strong>局部性locality</strong>：程序倾向使用靠近或等于最近使用的数据或指令</p><ul><li>时间：最近引用的物品更可能在不久的将来再次引用</li><li>空间：地址相近的物品倾向于一起被引用</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; M; i++)<br>    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; N; j++)<br>        sum += a[i][j];<br></code></pre></td></tr></table></figure><p>该程序有良好的局部性，若将 i，j 的循环顺序颠倒，则速度大幅下降</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/内存层次结构.webp" alt="内存层次结构"><figcaption aria-hidden="true">内存层次结构</figcaption></figure><p><strong>缓存 cache</strong>：一个更小、更快的存储设备，充当暂存</p><p>程序倾向于使用 k 层中的数据，而不是 k+1 层的数据</p><p>如果成功使用了 cache 中的内容，则称为<strong>缓存命中 cachehit</strong>；反之，则为 <strong>miss</strong></p><h1 id="缓存内存-cache-memories">缓存内存 Cache Memories</h1><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/一般缓存组织.webp" alt="一般缓存组织"><figcaption aria-hidden="true">一般缓存组织</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/字地址.webp" alt="字地址"><figcaption aria-hidden="true">字地址</figcaption></figure><p>读操作：靠索引获取 set 位置，比较 tag，若不同，则miss，查找下一级内存；若相同，则 hit，使用该 cache 中的内容</p><p>写：</p><ul><li>hit：将写回内存的时间推迟到这里的内容被覆盖（需要一个<strong>脏位dirty bit</strong>），类似于线段树的 tag 标记</li><li>miss：载入到 cache 中，更新 cache 的内容</li></ul><p>所以</p><ul><li>对变量的重复引用是好的（temporal locality）</li><li>步伐为 1 的模式是好的（spatial locality）</li></ul><p>内存山：考虑到 spatial 和 temporal locality 的内容 read through</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/内存山.webp" alt="内存山"><figcaption aria-hidden="true">内存山</figcaption></figure><p>对于矩阵乘法，分别计算三种循环方式</p><ul><li>ijk 每次迭代的 miss 为 1.25</li><li>kij 为 0.5</li><li>ikj 为 2.0</li></ul><p>故以下代码是最优的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n; k++)<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) {<br>        r = a[i][k];<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; n; j++)<br>            c[i][j] += r * b[k][j];<br>    }<br></code></pre></td></tr></table></figure><p>分块矩阵乘法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i, j, k;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i+=B)<br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;n;j+=B)<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;n;k+=B)<br><span class="hljs-comment">/* B x B mini matrix multiplications */</span><br><span class="hljs-keyword">for</span> (il=i;il&lt;i+B;i++)<br><span class="hljs-keyword">for</span> (jl = j; jl &lt; j+B; j++)<br><span class="hljs-keyword">for</span> (k1=k;k1&lt;k+B;k++)<br>c[il*n + j1] += a[il*n + k1] * b[k1*n + j1];<br></code></pre></td></tr></table></figure><p>通过计算可以得到</p><ul><li>不使用分块 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.636ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 4259 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(889,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mn" transform="translate(1389,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(1889,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2500.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(3222.4,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container></span></li><li>使用分块 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.353ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 5018 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1389,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(1889,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2648,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3259.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(3981.4,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container></span></li></ul><p>似乎 B 越大越好，但有限制 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="8.573ex" height="1.977ex" role="img" focusable="false" viewBox="0 -833.9 3789.1 873.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="msup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mn" transform="translate(792,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1973.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(3029.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span></p><p>因为矩阵乘法有固有的局部性，输入 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.476ex" height="1.937ex" role="img" focusable="false" viewBox="0 -833.9 1536.6 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="msup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>，输出 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.476ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 1536.6 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="msup" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>，必然有数据重复使用</p><h1 id="异常控制流异常和进程-exceptional-control-flow-exceptions-and-processes">异常控制流：异常和进程Exceptional Control Flow: Exceptions and Processes</h1><p>一般来说，CPU 按顺序依次执行指令</p><p>有两种改变控制流的方法：</p><ul><li>程序状态：<ul><li>跳跃和分支</li><li>调用和返回</li></ul></li><li>但还有系统状态：<ul><li>Ctrl - C</li><li>除零</li></ul></li></ul><p>即<strong>异常控制流 Exceptional Control Flow（ECF）</strong></p><p>其存在于计算机系统的所有层次：</p><ul><li>低层次：<ul><li>异常 Exception</li></ul></li><li>高层次：<ul><li>过程上下文切换 Process context switch</li><li>信号 Signal</li><li>非本地跳跃 Nonlocal jumps</li></ul></li></ul><p>异常是为了响应一些事件，将控制转移给<strong>操作系统内核 OSkernel</strong></p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/异常.webp"></p><p><strong>异常表 ExceptionTables</strong>：每个事件都有一个独有的异常号 k</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/异常表.webp"></p><p>异常分类：</p><ul><li>异步异常 asynchronous<ul><li><strong>打断 interrupt</strong><ul><li>由处理器的 interrupt pin 指示</li><li>返回到 next 指令</li><li>计时器中断/外部设备 IO</li></ul></li></ul></li><li>同步异常 synchronous<ul><li><strong>陷阱 trap</strong><ul><li>返回到 next</li><li>system call</li></ul></li><li><strong>错误 fault</strong><ul><li>可能重新执行或终止</li><li>页错误 page fault（可恢复），保护错误 protectionfault（不可恢复）</li></ul></li><li><strong>终止 abort</strong><ul><li>终止当前程序</li><li>错误指令</li></ul></li></ul></li></ul><p><strong>进程process</strong>：一个运行着的程序的实例<em>（注意不同于<strong>程序program</strong> 和<strong>处理器 processor</strong>）</em></p><p>进程为每个程序提供了两个关键的抽象：</p><ul><li>逻辑控制流<ul><li>每个程序似乎可以利用整个 CPU</li><li>由<strong>上下文切换 context switch</strong> 实现</li></ul></li><li>私有地址空间<ul><li>每个程序似乎可以利用整个内存</li><li>由<strong>虚拟内存 virtual memory</strong> 提供</li></ul></li></ul><p><strong>并发过程 concurrentprocess</strong>：两个过程的流在时间上有重叠</p><p>否则称为<strong>顺序 sequential</strong></p><p>过程由内存中的 OS 代码叫做<strong>内核 kernel</strong> 的东西管理</p><p><em>内核不是一个单独的进程，而是作为某个存在的进程运行</em></p><p>从一个过程到另一个的控制流切换通过<strong>上下文切换 contextswitch</strong></p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/上下文切换.webp"></p><p>系统调用：Linux 系统函数如果出错，通常返回 -1 并设置全局变量 errno来指示原因</p><p>法则：对于每个系统级函数都必须检查返回值，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>) {<br>    <span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">"fork error: %s\n"</span>, strerror(errno));<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>}<br></code></pre></td></tr></table></figure><p>为了简化代码，可以使用 Stevens 风格的错误处理包装函数，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">pid_t</span> <span class="hljs-title function_">Fork</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> {<br>    <span class="hljs-type">pid_t</span> pid;<br>    <br>    <span class="hljs-keyword">if</span> ((pid = fork()) &lt; <span class="hljs-number">0</span>)<br>        unix_error(<span class="hljs-string">"Fork error"</span>);<br>    <span class="hljs-keyword">return</span> pid;<br>}<br><br>pid = Fork();<br></code></pre></td></tr></table></figure><p>获取进程 ID：</p><ul><li><code>pid_t getpid(void)</code> 返回当前进程 PID</li><li><code>pid_t getppid(void)</code> 返回父进程 PID</li></ul><p>进程有三种状态：</p><ul><li><strong>运行中running</strong>：在执行、等待执行、将会被<strong>安排schedule</strong></li><li><strong>停止 stopped</strong>：被<strong>暂停suspended</strong>，直到信号到来不会被安排</li><li><strong>终止 terminated</strong></li></ul><p>进程终止的原因：</p><ul><li>结束到信号</li><li>从 <code>main</code> 过程返回</li><li>调用 <code>exit</code> 函数（调用一次，不返回）</li></ul><p>创建进程：<code>int fork(void)</code></p><ul><li>对于子进程返回 0，对于父进程返回子进程的PID（调用一次，返回两次）</li><li>子进程和父进程几乎相同：<ul><li>复制了虚拟内存地址</li><li>复制了打开的文件描述符</li><li>和父进程的 PID 不同</li></ul></li></ul><p>fork：</p><ul><li>并发执行</li><li>重复但独立的地址空间</li><li>共享打开的文件</li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/进程图.webp" alt="进程图"><figcaption aria-hidden="true">进程图</figcaption></figure><p>每个进程图的拓扑序都是一个可行的顺序</p><p>收割子进程：当进程终止时，仍消耗系统资源，被称作<strong>僵尸</strong></p><ul><li>由父进程对终止的子进程使用（用 <code>wait</code> 和<code>waitpid</code>）</li><li>父进程被提供退出状态信息</li><li>内核删除僵尸子进程</li></ul><p>如果有父进程在没有收割子进程就终止了，则该子进程会被<code>init</code> （pid =1）的进程收割。但在长时间运行的进程还是需要显示收割</p><p><code>int wait(int *child_status)</code></p><ul><li>暂停直到一个它的子进程终止</li><li>返回终止的子进程的 PID</li><li><code>child_status</code>指向的整数会被设为一个值指示子进程终止的原因和退出状态<ul><li>可以使用 <code>wait.h</code> 中定义的宏检查，包括<code>WIFEXITED</code>、<code>WEXITSTATIS</code>等</li></ul></li></ul><p><code>pid_t waitpid(pid_t pid, int &amp;status, int options)</code>等待一个指定的进程</p><p><code>int execve(char *filename, char *argv[], char *envp[])</code></p><ul><li>装载并在当前进程中执行</li><li><code>argv[0] == filename</code></li><li>调用一次，无返回</li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/新程序开始的栈.webp" alt="新程序开始的栈"><figcaption aria-hidden="true">新程序开始的栈</figcaption></figure><h1 id="异常控制流信号和非本地跳转-exceptional-control-flow-signals-and-nonlocal-jumps">异常控制流：信号和非本地跳转Exceptional Control Flow: Signals and Nonlocal Jumps</h1><p><strong>信号 signal</strong> 是通知一个进程某事件发生了的小信息</p><ul><li>由小整数 ID（1-30）识别</li><li>唯一的信息是它的 ID 和它抵达的事实</li></ul><table><thead><tr class="header"><th>ID</th><th>名字</th><th>默认动作</th><th>对应事件</th></tr></thead><tbody><tr class="odd"><td>2</td><td>SIGINT</td><td>终止</td><td>键入 ctrl-c</td></tr><tr class="even"><td>9</td><td>SIGKILL</td><td>终止</td><td>杀死程序（不可重载或忽略）</td></tr><tr class="odd"><td>17</td><td>SIGCHLD</td><td>忽略</td><td>子进程停止或终止了</td></tr></tbody></table><p>一些对信号的反应：</p><ul><li>忽略 ignore</li><li>终止进程</li><li>用执行用户级别的<strong>信号处理器 signal handler</strong>捕捉信号（类似与硬件级别的）</li></ul><p>如果一个信号被发送了但还没有被接收，则称为<strong>待定pending</strong></p><p><strong>注意：信号不会排队，即有一个待定的类型 k的信号，则接下来的所有类型为 k 的信号都被忽略</strong></p><p>进程可以<strong>阻塞 block</strong> 特定信号的接收</p><ul><li>被阻塞的信号可以发送，但直到被解除阻塞前都不会被接收</li></ul><p>内核在每个进程的上下文中维持了 pending 和 blocked 位向量，用第 k位表示</p><p>每个进程属于一个进程组</p><ul><li><code>getpgrp()</code> 返回当前进程组</li><li><code>setpgid()</code> 改变当前进程组 ID</li></ul><p>正数表示对某个进程操作，负数表示对某个进程组操作</p><p>键入 ctrl-c 表示对每个前台的进程组发送 SIGINT 信号</p><p>内核计算 <code>pnb = pending &amp; ~blocked</code></p><ul><li>如果 <code>pnb == 0</code> 则执行下一条指令</li><li>反之选择 <code>pnb</code> 中最小的非零位，并执行相关的信号开关</li></ul><p><code>handler_t *signal(int signum, handler_t *handler)</code>修改信号 <code>signum</code> 的默认接收行为</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/信号处理器的控制流.webp" alt="信号处理器的控制流"><figcaption aria-hidden="true">信号处理器的控制流</figcaption></figure><p>隐式阻塞信号：内核阻塞任何当前处理的同类型的信号</p><p>显式阻塞：<code>sigprocmask</code> 函数</p><p>相关函数：</p><ul><li><code>sigemptyset</code>：创建一个空集合</li><li><code>sigfillset</code>：把每个信号数字加入到集合中</li><li><code>sigaddset</code>：把信号数字加入到集合中</li><li><code>sigdelset</code>：从集合中删除信号数字</li></ul><p>安全的信号处理器的设计原则：</p><ul><li>保持处理器尽可能简单</li><li>只调用<strong>异步信号安全 async-signal-safe</strong> 的函数</li><li>在进入和退出时保存和恢复 <code>errno</code></li><li>通过阻塞所有信号保护共享的数据结构的访问</li><li>声明全局变量为 volatile，以防止编译器将其储存在寄存器中</li><li>声明全局标识符为 volatile sig_atomicity</li></ul><p>显式等待信号：<code>int sigsuspend(const sigset_t *mask)</code></p><p>非本地跳转：</p><ul><li><p><code>int setjmp(jmp_buf env)</code> 在 <code>env</code> buffer中保存当前调用环境；返回值不可赋值给一个变量，但可以用在<code>switch</code> 中</p></li><li><p><code>void longjmp(jmp_buf env, int retval)</code> 从<code>env</code> 中恢复调用环境并跳转到最近一次 <code>setjmp</code>调用，然后 <code>setjmp</code> 以 <code>retval</code> 返回</p></li></ul><p>应用：</p><ul><li>从多重函数中跳转</li><li>让信号处理器能够跳转到其它指令而不是返回下一条指令</li></ul><h1 id="系统层次输入输出-system-level-io">系统层次输入/输出 System-LevelI/O</h1><p><strong>文件 file</strong> 是字节序列</p><ul><li>所有的 I/O 设备都被表示为文件</li><li>内核也被表示为文件</li></ul><p>Unix I/O 接口：</p><ul><li>打开和关闭文件：<code>open()</code> 和 <code>close()</code></li><li>读和写文件：<code>read()</code> 和 <code>write</code></li><li>改变当前文件位置（seek）：<code>lseek()</code></li></ul><p>文件类型：</p><ul><li>一般文件 regular file</li><li>目录 directory</li><li>套接字 socket</li></ul><p>一般文件：</p><ul><li>应用程序往往区分为<strong>文本文件</strong>和<strong>二进制文件</strong>，但内核不区分</li><li>文本文件由文本行组成，EOL 在 Windows 和 Internet 协议中使用 ‘’(0xd0xa)(CRLF)，在 Linux 和 Mac OS 中使用 ‘’(0xa)(LF)</li></ul><p>目录：由许多<strong>链接 link</strong> 组成</p><ul><li><code>.</code> 指向它自己的链接</li><li><code>..</code> 父目录的链接</li></ul><p>打开文件：<code>fd = open("/etc/hosts", O_RDONLY)</code></p><p>返回一个<strong>文件描述符 file descriptor</strong></p><ul><li>若为 -1，则出错</li><li>0：stdin</li><li>1：stdout</li><li>2：stderr</li></ul><p>关闭文件：<code>retval = close(fd)</code></p><p>在多线程程序中关闭一个已经关闭的文件会出错</p><p>读文件：<code>nbytes = write(fd, buf, sizeof(buf))</code></p><p>返回写入 buf 的字节数</p><p><strong>短计数 short count</strong> 通常出现在</p><ul><li>遇到 EOF</li><li>从终端读文本行</li><li>读写网络套接字</li></ul><p>RIO 是更<strong>健壮 robust</strong> 的 I/O包装，用于网络程序，提供两种类型的函数：</p><ul><li>无缓冲的二进制数据：<code>rio_readn</code> 和<code>rio_writen</code></li><li>有缓冲的文本和二进制数据：<code>rio_readlineb</code> 和<code>rio_readnb</code><ul><li>线程安全，可以在相同文件上任意交错</li></ul></li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/有缓冲的IO实现.webp" alt="有缓冲的IO实现"><figcaption aria-hidden="true">有缓冲的IO实现</figcaption></figure><p><strong>元数据 metadata</strong> 是数据的数据，通过 <code>stat</code>和 <code>fstat</code> 函数访问</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/文件打开.webp" alt="文件打开"><figcaption aria-hidden="true">文件打开</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/文件共享.webp" alt="文件共享"><figcaption aria-hidden="true">文件共享</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/文件fork.webp" alt="文件fork"><figcaption aria-hidden="true">文件fork</figcaption></figure><p>I/O 重定向：<code>ls &gt; foo.txt</code> 使用了函数<code>dup2(oldfd, newfd)</code></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/IO重定向.webp" alt="IO重定向"><figcaption aria-hidden="true">IO重定向</figcaption></figure><p>C 语言提供了标准 I/O 函数：</p><ul><li>打开和关闭文件：<code>fopen</code> 和 <code>fclose</code></li><li>读和写二进制文件：<code>fread</code> 和 <code>fwrite</code></li><li>读和写文本文件：fgets<code>和</code>fputs`</li><li>格式化读和写：<code>fscanf</code> 和 <code>fprintf</code></li></ul><p>其中使用了 buffer，一般遇到 <code>\n</code> 时自动<strong>刷新flush</strong>，也可以使用 <code>fflush(fd)</code> 手动 flush</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/三种IO方式.webp" alt="三种IO方式"><figcaption aria-hidden="true">三种IO方式</figcaption></figure><p>一般来说使用标准 IO 即可，在使用网络时使用 RIO，在信号处理器中使用Unix IO</p><h1 id="虚拟内存概念-virtual-memory-concepts">虚拟内存：概念 VirtualMemory: Concepts</h1><p>使用<strong>内存管理单元 memory manage unit</strong>将虚拟地址转化为物理地址</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/虚拟内存.webp" alt="虚拟内存"><figcaption aria-hidden="true">虚拟内存</figcaption></figure><p>虚拟内存优点：</p><ul><li>主内存的效率更高</li><li>简化内存管理</li><li>隔离地址空间</li></ul><p>内存<strong>页 page</strong> 的大小一般为 4KB，有的是 4MB</p><p><strong>页表 page table</strong> 是<strong>页表项 page tableentries（PTE）</strong>的数组，其将虚拟页映射到物理页</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/页表.webp" alt="页表"><figcaption aria-hidden="true">页表</figcaption></figure><p>当对虚拟内存的引用没有出现在物理内存中时，出现<strong>页错误 pagefault</strong>，处理器选择一个受害者逐出，然后将需要的虚拟内存地址指向物理内存，并重新执行上一条指令</p><p>虚拟内存看似低效，但因为局部性，效率不错</p><p>程序倾向于访问活跃的虚拟内存页的集合叫<strong>工作集合 workingset</strong>，时间局部性较好的程序 working set 较小</p><p>虚拟内存对内存管理很有用：</p><ul><li>简化内存分配</li><li>在进程间共享代码和数据</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/虚拟内存作为内存管理的工具.webp"></p><p>虚拟内存也有利于保护内存：</p><ul><li>PTE 有许可位</li><li>MMU 在每次访问时检查这些位</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/虚拟内存作为内存保护的工具.webp"></p><p>地址转换的符号：</p><ul><li>参数<ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.305ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3228.8 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2221.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>：虚拟地址空间的地址数</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.119ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3588.4 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1328.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2384.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></span>：物理地址空间的地址数</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.84ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 3023.2 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(1028.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2084.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container></span>：页大小</li></ul></li><li>虚拟内存 VA<ul><li>TLBI：TLB 索引</li><li>TLBT：TLB 标签</li><li>VPO：虚拟页偏移</li><li>VPN：虚拟页数字</li></ul></li><li>物理地址 PA<ul><li>PPO：物理页偏移</li><li>PPN：物理页数字</li></ul></li></ul><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/地址翻译.webp" alt="地址翻译"><figcaption aria-hidden="true">地址翻译</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/地址翻译：页命中.webp" alt="地址翻译：页命中"><figcaption aria-hidden="true">地址翻译：页命中</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/地址翻译：页错误.webp" alt="地址翻译：页错误"><figcaption aria-hidden="true">地址翻译：页错误</figcaption></figure><p>使用的缓存是<strong>转译后备缓冲器 translation lookasidebuffer(TLB)</strong></p><p>多级页表：解决使用过多空间的问题</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/二级页表层次结构.webp" alt="二级页表层次结构"><figcaption aria-hidden="true">二级页表层次结构</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/k级页表.webp" alt="k级页表"><figcaption aria-hidden="true">k级页表</figcaption></figure><h1 id="虚拟内存系统-virtual-memory-systems">虚拟内存：系统 VirtualMemory: Systems</h1><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/酷睿i7内存系统.webp" alt="酷睿i7内存系统"><figcaption aria-hidden="true">酷睿i7内存系统</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/酷睿i7地址翻译.webp" alt="酷睿i7地址翻译"><figcaption aria-hidden="true">酷睿i7地址翻译</figcaption></figure><p>加快 L1访问的技巧：因为物理地址和虚拟地址的偏移是相等的，所以可以直接将其加入到缓存中</p><p>Linux 将地址组成叫做 <strong>area</strong>的集合，即一个个的内存段</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/Linux内存.webp" alt="Linux内存"><figcaption aria-hidden="true">Linux内存</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/页错误处理.webp" alt="页错误处理"><figcaption aria-hidden="true">页错误处理</figcaption></figure><p><strong>写时复制copy-on-write（COW）</strong>的策略：两个进程先共享同样的内存，若想要修改该内存，则需复制一份</p><p><code>fork</code>就使用了这种策略，故速度很快，只有在需要是才会复制</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/页错误处理.webp" alt="页错误处理"><figcaption aria-hidden="true">页错误处理</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/写时复制.webp" alt="写时复制"><figcaption aria-hidden="true">写时复制</figcaption></figure><p><code>void *mmap(void *start, size_t length, int prot, int flags, int fd, off_t offset)</code>可以对指定文件创建一个虚拟内存地址，这样就做到了只有在需要读的时候才会写入内存</p><h1 id="动态内存分配基本概念-dynamic-memory-allocation-basic-concepts">动态内存分配：基本概念Dynamic Memory Allocation: Basic Concepts</h1><p>程序员在运行时使用<strong>动态内存分配器 Dynamic MemoryAllocators</strong>（例如 malloc）获取VM，因为一些数据结构只有在运行时才能得知其大小</p><p>动态内存分配器维护的 VM 区域叫<strong>堆 heap</strong></p><p>分配器把堆作为大小为<strong>块 blocks</strong>的变量，其只有<strong>已分配 allocated</strong> 和<strong>释放了free</strong></p><p>分配器的类型：</p><ul><li>显式分配器：应用分配空间和释放空间，如 malloc 和 free</li><li>隐式分配器：应用分配空间，但不释放空间，如 garbage collector</li></ul><p><code>void *malloc(size_t size)</code>：</p><ul><li>成功时返回一个至少为 <code>size</code>对齐于 8 byte（x86）或 16byte（x86-64）的内存块的边界的指针</li><li>未成功：返回 <code>NULL</code> 并设置 <code>errno</code></li></ul><p><code>void free(void *p)</code>：</p><ul><li>返回被 p 指向的可用区域的块</li><li>p 必须从 <code>malloc</code> 或 <code>realloc</code> 得来</li></ul><p>其它函数：</p><ul><li><code>calloc</code>：初始化变量为 0 的 <code>malloc</code></li><li><code>realloc</code>：改变之前分配的块的大小</li><li><code>sbrk</code>：被分配器在其内部使用以增大或减小堆的大小</li></ul><p>约束：</p><p>对于应用：</p><ul><li>可以发出<strong>任意</strong> <code>malloc</code> 和<code>free</code> 的请求序列</li><li><code>free</code> 请求必须对应 <code>malloc</code> 块</li></ul><p>对于分配器：</p><ul><li>无法控制已分配的块的数量和大小</li><li>必须<strong>立刻</strong>回应 <code>malloc</code> 请求</li><li>必须从空闲的内存中分配块</li><li>必须返回的块对齐</li><li>可以操作或修改空隙内存，但不能移动已分配块</li></ul><p>表现目标：</p><ul><li><strong>吞吐量 throughput</strong>：每单位时间完成的请求数量</li><li><strong>峰值内存使用 peak memory utilization</strong>：在 k + 1次请求后，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.219ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9820.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1412.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2468,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="munder" transform="translate(2857,0)"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1894,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><g data-mml-node="text"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="text" transform="translate(778,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mi" transform="translate(1901,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="msub" transform="translate(6680.2,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(7649.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8038.2,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msub" transform="translate(8538.2,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(864,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>，其中 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.474ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1093.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span>表示<strong>负载 payload</strong>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.901ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1282.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(864,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container></span> 表示当前堆大小</li></ul><p><strong>内部碎片 internalfragmentation</strong>：负载小于块大小，主要由维护堆的数据结构的开销和对齐造成</p><p><strong>外部碎片 externalfragmentation</strong>：有足够的内存，但没有空闲的块足够大</p><p>跟踪空闲块：</p><ul><li>使用长度<strong>隐式</strong>列表（链接所有的块）</li><li>使用指针对所有空闲块<strong>显式</strong>列表</li><li>分开空闲列表，如把不同大小的类分成不同的列表</li><li>通过大小排序块，如使用平衡树用指针指向空闲块，长度作为键使用</li></ul><p>方法一：隐式列表</p><p>因为块是对齐的，所以一些地位地址总是0，所以可以用其当作分配的状态位</p><p>找到一个空闲块：</p><ul><li><strong>第一次</strong>合适：从开头搜索，选择<strong>第一个</strong>合适的块</li><li>下一个合适：从<strong>上一次结束的地方</strong>开始搜索，其余和第一次合适一样</li><li>最优匹配：选择<strong>最优</strong>的空闲列表</li></ul><p>在空闲块中分配：<strong>分裂 split</strong></p><p>释放块：需要<strong>合并 coalesce</strong> 之前的和下一个空闲的块</p><p>查找前一个块的方法是边界标签，即在块的尾部添加和头部一样的标签，同时只有分配的才需要</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/边界标记.webp" alt="边界标记"><figcaption aria-hidden="true">边界标记</figcaption></figure><p>合并策略：</p><ul><li>立即合并</li><li>推迟合并</li></ul><h1 id="动态内存分配进阶概念-dynamic-memory-allocation-advanced-concepts">动态内存分配：进阶概念Dynamic Memory Allocation: Advanced Concepts</h1><p>显式列表：类似于一个链表</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/显式列表%20(2).webp" alt="显式列表结构"><figcaption aria-hidden="true">显式列表结构</figcaption></figure><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/显式列表%20(1).webp"></p><p>释放：插入策略：</p><ul><li>LIFO</li><li>地址顺序</li></ul><p><strong>分开列表 segregated list</strong></p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/分开列表.webp"></p><p><strong>垃圾回收 garbage collection</strong>：C语言中是<strong>保守的conservative</strong>，因为无法区分指针和非指针</p><p>把内存视为一个有向图：</p><ul><li>块是节点</li><li>指针是边</li><li>不在堆中的包括指向堆的指针叫 root 节点</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/垃圾回收.webp"></p><p><strong>标记和清扫 Mark and Sweep</strong>：使用 <code>malloc</code>直到用尽空间</p><ul><li>在每个块的头部使用<strong>标记位</strong></li><li>标记：从根开始标记每个可到达的块</li><li>清扫：搜索所有的块并释放没有标记的块</li></ul><p>对于指针，注意运算符优先级</p><p>常见错误：</p><ul><li><code>scanf</code> 没有使用 <code>&amp;</code></li><li>假设堆的数据已经初始化</li><li>分配错误大小的对象</li><li>数组索引多了 1</li><li>没有检查最大 string 大小</li><li>误解指针算术</li><li>引用不存在的变量，如局部变量</li><li>多次释放块</li><li>引用释放的块</li><li>忘了释放块</li></ul><h1 id="网络编程-network-programming">网络编程 Network Programming</h1><p><strong>客户端-服务器交易 Client-Server Transaction</strong>：</p><ul><li>一个服务器进程和一个或多个客户端进程</li><li>服务器管理一些<strong>资源 resource</strong></li><li>服务器通过操作资源为客户端提供<strong>服务 service</strong></li><li>服务器被客户端的请求激活</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/客户端-服务器交易.webp"></p><p>将网络抽象为一个文件</p><p><strong>网络 network</strong> 是主机的系统的集合，包括SAN，LAN，WAN</p><p><strong>internet</strong> 是相互连接的网络的集合</p><p>最低层级：<strong>以太网段 Ethernet segment</strong> 由<strong>主机hosts</strong> 由线连接为一个 <strong>hub</strong> 组成</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/网络编程1.webp"></p><p>下一个层级：桥接的以太网</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/网络编程2.webp"></p><p>下一个层次：internet，通过<strong>路由器 routers</strong>连接多重不兼容的 LAN</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/网络编程3.webp"></p><p><strong>协议 protocol</strong>：</p><ul><li>提供命名方案：主机地址</li><li>提供分发机制：定义了转移单位<strong>包 packet</strong>，包由<strong>header</strong> 和 <strong>payload</strong> 组成</li></ul><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/转移internet数据.webp"></p><p>全局 IP Internet，基于 TCP/IP 协议：</p><ul><li><strong>IP（InternetProtocol）</strong>：提供<strong>基本命名方案</strong>和不可靠的从<strong>主机到主机</strong>的包的<strong>分发兼容性</strong></li><li><strong>UDP（Unreliable Datagram Protocol）</strong>：使用 IP提供<strong>不可靠的</strong>从<strong>进程到进程</strong>的数据分发</li><li><strong>TCP（Transmission Control Protocol）</strong>：使用 IP提供<strong>可靠的</strong>通过<strong>连接</strong>的从<strong>进程到进程</strong>的字节流</li></ul><p>通过 Unix 文件 I/O 和<strong>套接字接口 socket interface</strong>中的函数访问</p><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/网络应用的软件和硬件组织.webp"></p><ul><li>主机被映射为一个 32 位的 <strong>IP 地址 IP address</strong></li><li>IP 地址集合被映射为一个标识符集合叫做 Internet <strong>域名 domainnames</strong></li><li>一个 Internet 主机上的进程可以通过<strong>连接 connection</strong>和另一个主机上的进程交流</li></ul><p>IPv4 和 IPv6</p><p>IP 地址：被储存在一个 <strong>IP 地址结构中</strong>，为大端序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> {</span><br>    <span class="hljs-type">uint32_t</span> s_addr;<br>}<br></code></pre></td></tr></table></figure><p>使用这个 struct 可以不用手动转换大端序和小端序</p><p>转换二进制 IP 地址和用点分割的十进制字符串的函数：（“n” 表示network，“p” 表示 presentation）</p><ul><li><code>inet_pton</code>：string -&gt; IP address</li><li><code>inet_ntop</code>：IP address -&gt; string</li></ul><p>Internet 使用<strong>域名系统 Domain Naming System（DNS）</strong>维护从 IP地址和域名的映射，使用的是一个巨大的全世界范围的分布式数据库，可以将其视为许多条<strong>主机项</strong>的集合，主机项定义了域名集合与IP 地址的映射</p><p>多个域名被映射到多个 IP 地址，有些有效的域名没有被映射到任何 IP地址</p><p>每个连接是：</p><ul><li>点对点的</li><li>完全双重的 full-deplex</li><li>可靠的</li></ul><p><strong>套接字 socket</strong> 是一个连接的终点</p><p><strong>端口 port</strong> 是一个 16 位整数，其识别一个进程：</p><ul><li>短暂的ephemeral，当客户端发起一个连接请求时，客户端内核自动分配</li><li>众所周知的 well-know，如 80 端口被用于 web</li></ul><p>一些常见的服务和对应的端口：</p><ul><li>echo：7/echo</li><li>ssh：22/ssh</li><li>email：25/smtp</li><li>web：80/http</li></ul><p>端口-服务名的映射别储存在 Linux 的 /etc/services</p><p>套接字：</p><ul><li>对内核来说，socket 是通信的终点</li><li>对应用来说，socket 是一个让应用读写网络的文件描述符</li></ul><p>客户端和服务器通过读写 socket 描述符通信</p><p>Internet 的 socket 地址：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> {</span><br>    <span class="hljs-type">uint16_t</span> sin_family; <span class="hljs-comment">// 通常是 AF_INET</span><br>    <span class="hljs-type">uint16_t</span> sin_port;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> <span class="hljs-title">sin_addr</span>;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> sin_zero[<span class="hljs-number">8</span>]; <span class="hljs-comment">// 填充</span><br>}<br></code></pre></td></tr></table></figure><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/通信过程.webp"></p><p>socket 接口：</p><ul><li>socket：<code>int socket(int domain, int type, int protocol);</code>，一般使用<code>getaddrinfo</code>自动生成参数，则无关协议</li><li>bind：<code>int bind(int sockfd, SA *addr, socklen_t addrlen);</code>，将socket 地址和 socket 描述符联系到一起</li><li>listen：<code>int listen(int sockfd, int backlog);</code>，用于告诉内核一个描述符会被用于服务网而不是客户端</li><li>accept：<code>int accept(int listenfd, SA *addr, int *addrlen);</code>等待连接请求到达该连接，并在 addr 中填充客户端的 socket地址和大小，返回用于交流的描述符</li><li>connect：<code>int connect(int clientfd, SA *addr, socklen_t addrlen);</code>，建立连接</li></ul><p><code>getaddrinfo</code>是转换字符串表示的主机名，主机地址，端口和服务名为 socket地址的方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getaddrinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *host, <span class="hljs-comment">// 主机名或地址</span></span><br><span class="hljs-params">                <span class="hljs-type">const</span> <span class="hljs-type">char</span> *service, <span class="hljs-comment">// 服务名或端口</span></span><br><span class="hljs-params">                <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> addrinfo *hints,</span><br><span class="hljs-params">                <span class="hljs-keyword">struct</span> addrinfo **result)</span>; <span class="hljs-comment">// 输出一个链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">freeaddrinfo</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> addrinfo *result)</span>; <span class="hljs-comment">// 释放链表</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">gai_strerror</span><span class="hljs-params">(<span class="hljs-type">int</span> errcode)</span>; <span class="hljs-comment">// 返回错误信息</span><br></code></pre></td></tr></table></figure><p><img src="/illustration/CMU%20CS15-213：计算机系统导论/getaddrinfo.webp"></p><p><code>getnameinfo</code> 是 <code>getaddrinfo</code> 的逆，将 socket地址转为主机和服务：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getnameinfo</span><span class="hljs-params">(<span class="hljs-type">const</span> SA *sa, <span class="hljs-type">socklen_t</span> salen, <span class="hljs-comment">// 输入：socket 地址</span></span><br><span class="hljs-params">                <span class="hljs-type">char</span> *host, <span class="hljs-type">size_t</span> hostlen,<span class="hljs-comment">// 输出：host</span></span><br><span class="hljs-params">                <span class="hljs-type">char</span> *serv, <span class="hljs-type">size_t</span> servlen,<span class="hljs-comment">// 输出：service</span></span><br><span class="hljs-params">                <span class="hljs-type">int</span> flags)</span>;<br></code></pre></td></tr></table></figure><p>Web 服务：</p><p>使用<strong>超文本传输协议 HyperText Transfer Protocol(HTTP)</strong>通信，当前版本是 HTTP 2.0</p><p>Web 服务返回<strong>内容 content</strong> 给客户端，内容是一个<strong>MIME（Multipurpose Internet Mail Extensions）</strong>类型的字节序列</p><p>返回的内容可以是<strong>静态的</strong>，也可以是<strong>动态的</strong></p><p>每个文件专有的名字：<strong>URL（Universal ResourceLocator)</strong></p><p>对于URL：https://old-driver-zero.github.io:443/index.html</p><ul><li>客户端使用前缀 <code>https://old-driver-zero.github.io:443</code>推断：<ul><li>使用何种协议（HTTPS）</li><li>那个服务器（old-driver-zero.github.io）</li><li>哪个端口（443）</li></ul></li><li>服务器使用后缀（/index.html）来：<ul><li>确定是静态的还是动态的内容（没有硬性规定，但一个惯例是：可执行文件储存在<code>cgi-bin</code> 目录下）</li><li>在文件系统上找到文件：<ul><li>使用 <code>/</code> 分割</li><li>最小前缀是 <code>/</code>，服务器将其扩展为配置好的文件名（一般是index.html）</li></ul></li></ul></li></ul><p><strong>HTTP 请求</strong>是一个<strong>请求行 requestline</strong>，跟着零或更多<strong>请求头 request headers</strong></p><ul><li>请求行：<code>&lt;method&gt; &lt;uri&gt; &lt;version&gt;</code><ul><li><code>&lt;method&gt;</code> 是<code>GET, POST, OPTIONS, HEAD, PUT, DELETE, TRACE</code> 之一</li><li><code>&lt;uri&gt;</code> 是代理的 URL，URL 是 URI 的一个类型</li><li><code>&lt;version&gt;</code> 是 HTTP 版本</li></ul></li><li>请求头：<code>&lt;header name&gt;: &lt;header data&gt;</code></li></ul><p><strong>HTTP 回应</strong>是一个回应行，跟着零或更多<strong>回应头request headers</strong>，空行用 <code>\r\n</code> 分割</p><ul><li>回应行：<code>&lt;version&gt; &lt;status code&gt; &lt;status msg&gt;</code><ul><li><code>&lt;version&gt;</code> 是 HTTP 版本</li><li><code>&lt;status code&gt;</code> 是数字状态，如 404</li><li><code>&lt;status msg&gt;</code> 是相关的英语文本</li></ul></li><li>回应头：<code>&lt;header name&gt;: &lt;header data&gt;</code></li></ul><h1 id="并发编程-concurrent-programming">并发编程 ConcurrentProgramming</h1><p>并发编程很难，因为</p><ul><li>人类的头脑倾向于顺序</li><li>时间经常被忽略</li><li>考虑所有可能的事件顺序很难</li></ul><p>并发程序的问题分类：</p><ul><li><strong>竞争 race</strong>：结果取决于任意调度</li><li><strong>死锁 deadlock</strong>：阻碍继续前进</li><li><strong>饿死 starvation</strong>：轮不到你</li></ul><p>迭代式服务器：一次处理一个请求</p><p>写并发服务器的方法：</p><ul><li><strong>基于进程</strong>：<ul><li><strong>内核</strong>自动交错多个逻辑流</li><li>每个流有它自己的<strong>私有</strong>地址空间</li></ul></li><li><strong>基于事件</strong>：<ul><li><strong>程序员</strong>手动交错多重逻辑流</li><li>所有流<strong>共享</strong>相同的地址空间</li><li>使用被称作 <strong>I/O 多路复用</strong>的技术</li></ul></li><li><strong>基于线程</strong>：<ul><li><strong>内核</strong>自动交错多重逻辑流</li><li>每个流共享相同的地址空间</li><li>算是前两者的杂交</li></ul></li></ul><p>基于进程的服务器：</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/基于进程的服务器.webp" alt="基于进程的服务器"><figcaption aria-hidden="true">基于进程的服务器</figcaption></figure><p>因为父和子进程都有 listenfd 和 connectfd 的复制，所以</p><ul><li>父必须关闭 connfd</li><li>子应该关闭 listenfd</li></ul><p>且必须收割僵尸子进程</p><p>基于事件的服务器：决定哪个描述符有待定的输入，例如使用<code>select</code> 或 <code>epoll</code>函数，待定的输入的到达是一个事件</p><p>进程 = 进程上下文 + 代码，数据和栈</p><p>线程 = 线程 + 代码，数据和内核上下文</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/进程.webp" alt="进程"><figcaption aria-hidden="true">进程</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/线程.webp" alt="线程"><figcaption aria-hidden="true">线程</figcaption></figure><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/一个有多线程的进程.webp" alt="一个有多线程的进程"><figcaption aria-hidden="true">一个有多线程的进程</figcaption></figure><p>线程和线程形成一个 peer 池，而进程形成树层次结构</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/逻辑视角.webp" alt="逻辑视角"><figcaption aria-hidden="true">逻辑视角</figcaption></figure><p>线程的花费比进程小</p><p><strong>POSIX 线程</strong>（Pthread）接口：</p><ul><li>创建和收割线程：<code>pthread_create(), pthread_join()</code></li><li>确定自己的线程 ID：<code>pthread_self()</code></li><li>终止线程：<code>pthread_cancel(), pthread_exit()</code></li></ul><p>线程在 detached 模式中运行：</p><ul><li>一个线程要么是<strong>可连接 joinable</strong>，要么是<strong>脱离的detached</strong></li><li>一个可连接的线程可以被其他线程收割或杀死，必须使用<code>pthread_join</code> 释放内存资源</li><li>脱离的线程不可以被被其他线程收割或杀死，终止时资源自动被内核收割</li><li>默认状态是可连接的，使用 <code>pthread_detach(pthread_self())</code>脱离</li></ul><h1 id="同步基础-synchronizationbasics">同步：基础synchronization：Basics</h1><p><em>定义</em>：当且仅当多个线程引用某个 x 的实例，则称变量 x是<strong>共享的 shared</strong></p><p>全局变量：</p><ul><li>在函数外声明</li><li>虚拟内存包括一个全局变量实例</li></ul><p>局部变量：</p><ul><li>在函数内部声明，没有 static</li><li>每个线程栈包括每个局部变量的一个实例</li></ul><p>局部静态变量：</p><ul><li>在函数内声明，有 static</li><li>虚拟内存包括一个局部静态变量实例</li></ul><p>并发执行：一般来说，任何顺序一致的交错都是可能的，但是有些给出意料之外的结果</p><p><strong>过程图 progress graph</strong>描绘了并发线程的离散的<strong>执行状态空间 execution statespace</strong></p><ul><li>每个轴代表一个线程顺序执行指令</li><li>每个点关系到一个可能的执行状态</li><li><strong>轨迹 trajectory</strong>合法转移序列，其描述了一个并发线程可能的执行</li><li>L，U，S 形成了对变量 cnt 的<strong>临界段 criticalsection</strong></li><li>临界段中的指令不能交错，这种交错出现的状态集合形成了<strong>不安全区域unsafe regions</strong></li></ul><p>所以当且仅当一个没有进入任何不安全区域时，这个轨迹是<strong>安全的</strong></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/过程图.webp" alt="过程图"><figcaption aria-hidden="true">过程图</figcaption></figure><p>为了确保安全的轨迹，必须<strong>同步 synchronize</strong>线程的执行，即保证对临界段的<strong>互斥访问 mutually exclusiveaccess</strong></p><p><strong>信号量 Semaphore</strong>：由 P 和 V操作控制的非负全局整数同步变量</p><p><code>P(s)</code>：</p><ul><li>如果 s 非 0，则 s - 1 并立即返回</li><li>如果 s 为 0，则暂停直到 s 变成 0 且该线程由 V 操作重启</li><li>在重启后，P 操作减小 s 并返回控制权给 callee</li></ul><p><code>V(s)</code>：</p><ul><li>s + 1</li><li>如果有线程被等待 s 变成非 0 的 P 操作阻塞了，则重启其中一个线程</li></ul><p><strong>这两个操作共同形成了不变量：s &gt;= 0</strong></p><p>Pthreads 提供的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_init</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s, <span class="hljs-number">0</span>, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> val)</span>; <span class="hljs-comment">/* s = val */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_wait</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* P(s) */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sem_post</span><span class="hljs-params">(<span class="hljs-type">sem_t</span> *s)</span>; <span class="hljs-comment">/* V(s) */</span><br></code></pre></td></tr></table></figure><p>使用信号量的互斥：</p><p>基本思想：</p><ul><li>将一个初始为 1 的唯一信号量 mutex 与每个共享的变量关联</li><li>在临界段周围加上 <code>P(mutex)</code> 和 <code>V(mutex)</code>操作</li></ul><p>术语：</p><ul><li><strong>二进制信号量 Binary semaphore</strong>：值总是 0 或 1的信号量</li><li><strong>Mutex</strong>：用于互斥的二进制信号量<ul><li>P 操作：<strong>锁上 locking</strong> mutex</li><li>V 操作：<strong>解锁 unlocking</strong> 或<strong>释放releasing</strong> mutex</li><li><strong>保持 holding</strong> mutex：锁上但没有解锁</li></ul></li><li><strong>计数信号量 countingsemaphore</strong>：用于可获得的资源的集合的计数器</li></ul><p>从过程图来看，信号量创造了一个<strong>禁止区域</strong></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/Mutex工作原理.webp" alt="Mutex工作原理"><figcaption aria-hidden="true">Mutex工作原理</figcaption></figure><h1 id="同步进阶-synchronization-advanced">同步：进阶 Synchronization:Advanced</h1><p>使用信号量协调对共享资源的访问：</p><p>基本思想：线程使用信号量操作通知另一个线程某情况已经满足了</p><ul><li>使用计数信号量跟踪资源状态并通知其他线程</li><li>使用 mutex 保护对资源的访问</li></ul><p>两个经典例子：</p><p><strong>生产者-消费者问题 Producer-Consumer Problem</strong>：</p><ul><li>生产者等待空<strong>槽 slot</strong>，在 buffer中插入物品，通知消费者</li><li>消费者等待<strong>物品 item</strong>，将其从 buffer中移除，通知生产者</li></ul><p><strong>读者-写者问题 Readers-Writers Problem</strong>：</p><ul><li>读者只读对象</li><li>写者修改对象</li><li>写者必须互斥访问对象</li><li>访问对象的读者无数量限制</li></ul><p>变种：</p><ul><li>读者优先</li><li>写者优先</li></ul><p>两者情况饿死都会存在</p><p>一个线程中的函数必须是<strong>线程安全的 thread-safe</strong></p><p><em>定义</em>：当且仅当一个函数从多重并发线程中重复调用时，总是返回正确的结果，则该函数是<strong>线程安全的</strong></p><p>线程不安全的函数分类：</p><ul><li>没有保护共享变量的函数</li><li>从多重调用中保留了状态的函数</li><li>返回指向一个静态变量的指针的函数</li><li>调用线程不安全的函数的函数</li></ul><p><em>定义</em>：当且仅当一个函数访问没有共享的变量，则该函数是<strong>可重入的reentrant</strong></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/可重入函数.webp" alt="可重入函数"><figcaption aria-hidden="true">可重入函数</figcaption></figure><p><strong>竞争 race</strong>发生在程序的正确性依赖于一个线程在另一个线程达到 y 点前到达 x 点</p><p><em>定义</em>：当且仅当一个线程等待一个不可能发生的条件时，其是<strong>死锁的deadlocked</strong></p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/死锁.webp" alt="死锁"><figcaption aria-hidden="true">死锁</figcaption></figure><p>避免死锁的方法：以相同的顺序获取资源</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/避免死锁.webp" alt="避免死锁"><figcaption aria-hidden="true">避免死锁</figcaption></figure><h1 id="线程层次并行-thread-level-parallelism">线程层次并行 Thread-LevelParallelism</h1><p>因为往往 CPU的一个核心中的所有算术单元不会同时使用到，故使用<strong>超线程hyperthread</strong> 可以提高其利用率</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/超线程实现.webp" alt="超线程实现"><figcaption aria-hidden="true">超线程实现</figcaption></figure><p>并行程序效率：</p><ul><li><strong>加速比 speedup</strong>：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="11.15ex" height="2.347ex" role="img" focusable="false" viewBox="0 -750 4928.5 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(1329.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2385.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3405.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msub" transform="translate(3905.8,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></g></svg></mjx-container></span></li><li><strong>效率 effciency</strong>：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="21.997ex" height="2.347ex" role="img" focusable="false" viewBox="0 -750 9722.7 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(1454.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2510.2,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3561.9,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(4061.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(4842.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(5898.5,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6919,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mo" transform="translate(7419,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7808,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="msub" transform="translate(8311,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g><g data-mml-node="mo" transform="translate(9333.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></li></ul><p><strong>阿姆达尔定律 Amdahl’s Law</strong>：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.554ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9526.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(1313.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2369,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(2872,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3576,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(4076,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4819.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(5819.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(6208.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6930.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7930.8,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(8433.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(8822.8,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span></p><ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></span> 为可以被加速的部分比例</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container></span> 加速因子</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 需要的总时间</li><li>当 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.458ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2854.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1854.6,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span> 时，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.514ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6415.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1651.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2707.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3096.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3818.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4819.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5322.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(5711.1,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span></li></ul><p>对于硬件设计者要注意<strong>内存一致性</strong>，即两个线程的缓存是不同的，一个修改了内存，但因为<strong>延迟回写</strong>，内存中内容没有变，改变的是其缓存的内容。此时另一个线程想要访问值，获得的还是原来的值。</p><figure><img src="/illustration/CMU%20CS15-213：计算机系统导论/不一致的缓存.webp" alt="不一致的缓存"><figcaption aria-hidden="true">不一致的缓存</figcaption></figure><p>解决方法为缓存增加一个状态位：当其为 E时，需要请求另一个线程中的缓存而不是找下级内存</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1
        
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://old-driver-zero.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CMU" scheme="https://old-driver-zero.github.io/tags/CMU/"/>
    
      <category term="计算机系统" scheme="https://old-driver-zero.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>意料之外，情理之中</title>
    <link href="https://old-driver-zero.github.io/posts/1185a02e.html"/>
    <id>https://old-driver-zero.github.io/posts/1185a02e.html</id>
    <published>2023-09-02T04:19:21.272Z</published>
    <updated>2023-09-02T06:31:21.250Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>欧亨利是我最早接触到的一批外国作家之一了，毕竟他的小说比较容易读懂。而他的小说结尾总之出人意料，给年幼的我留下了深刻的印象。而且他描写人物的时候总是模糊掉该人物的特征，让我觉得他描写的就是写普通老百姓，写的真实发生在我们身边的故事。</p><p>不过，以现在的眼光来看，这些结尾都不难猜，难怪很多评论家都对他评价不高，甚至虽然他有个“世界三大短篇小说巨匠”的称号，但是公认的水平最低的，甚至还不如一些没这个响亮名号的作家。</p><p>他的经历也确实不光明，写的作品质量也参差不齐，完全不符合人们心目中的“大师”形象。</p><p>不过在我看来，其对于普通人生活的刻画和捕捉人世间的温情的能力，无人能出其右。套用杜甫的话，“尔曹身与名俱灭，不废江河万古流”，他的人物都来自他所处的时代，有其时代的局限性；而他的立意却指向人类生活中那些永恒的话题——真善美，是真正意义上的扎根于民间，枝叶伸向天际。尽管他绝对不是顶尖的作家，但也不是很多三流作家或评论家所能嘲笑的。</p><h1 id="这件礼物代表着爱">这件礼物代表着爱</h1><p>《麦琪的礼物》应该是我看的他的第一篇小说，也是他最有名的小说，第一次看的时候结局直接把我给刀傻了。当时的我还太年轻，只是为那对夫妻舍弃了自己最重要的东西，换来的却是一文不值的礼物而惋惜。</p><p>现在看来，就像作者在原文中说的，这是最珍贵的礼物，那时的我还不懂什么叫爱，或许这是我最接近“爱”的一次了。</p><h1 id="永不凋零">永不凋零</h1><p>真要说起来，《最后一片叶子》才是我看的第一篇小说，不过是在哪本故事集中看到的，为了更适合小宝宝体质，入选时做了许多的魔改，但那个最动人的情节还是保留着的，这篇故事是那本故事集中给我留下最深印象的故事了。<del>有种赵明诚把李清照的一首词混在自己的作品里，还被人挑出来对这首词大加赞赏的感觉了</del></p><p>在此之前，我一直认为“伟大”只能用于做出惊天动地的大事的伟人，往往是领导者或科学家。而在这一篇小说中，我第一次隐隐约约地感受到普通人也可以冠以“伟大”之名，那个不起眼的老人完成了最伟大的作品。以至于多年以后我看《月亮与六便士》，主人公画出的画本应震撼人心，我却只感受到了震撼，而没有感受到触动，因为最伟大的画作，我早已见过。</p><h1 id="拷在一起的心">拷在一起的心</h1><p>《心与手》从现在的眼光看，纰漏非常多，不算是欧亨利的代表作，但我却很喜欢这篇。最大的问题还是在于缺少铺垫，谁说那个警察一定是右撇子的。</p><p>但这部作品带给我的最大触动还是人与人之间相互理解的善意，而受到帮助的人的身份更特殊，他是一位犯人。我发表的感慨和那个乘客一样：“（那个警察）真是一个好人。”</p><h1 id="我想当一个好人">我想当一个好人</h1><p>《警察与赞美诗》简直把讽刺发挥到了极致。当他想入狱并做出一些违法的举动时，没人去抓他；当他想改邪归正时，却被人因奇怪的原因抓了。没有比这更讽刺的情节了，而且这情节永不过时。</p><h1 id="钱是万能的">钱是万能的</h1><p>同样满是讽刺的还有《财神与爱神》，父亲用钱人为制造了一起大堵车，并使儿子求婚成功的情节真是让我惊得大跌眼镜。那时的我像那位儿子一样认为“爱情价更高”，现在经历了这么多，实在是越来越赞同那个老头了。又是一个嘲笑他，理解他，却永远成为不了他。</p><p>不过，这部小说还让我打开了一个新的视角——钱是万能的，但人不是万能的，只是很多人都不知道怎样巧妙地利用钱。就像原著中老头说的“当然，你不能出个价钱，叫永恒包扎得好好的给你送到家门口，但是，我已经见过，时间老人穿过金矿时，被石块弄得满脚伤痕”。</p><p>其实儿子最终能收获爱情，确实不全是财神的功劳，他的姑妈给他的戒指就象征着爱神，只有两者合一，才能收获圆满。</p><p>所以美好的爱情，爱神和财神缺一不可。</p><p>这个故事实际上让我明白了说钱不是万能的人是愚蠢的，说只有钱是重要的人是可悲的。</p><h1 id="人性的复杂">人性的复杂</h1><p>《提线木偶》中的主角和男主人谁是好人，谁是坏人？这真不好说。主角虽然是一个伪装成医生的小偷，但他因同情女主人而给她留下了一笔钱。</p><p>这篇小说让我第一次接触到了复杂的人性，内心五味杂陈。</p><h1 id="出乎意料的爱情">出乎意料的爱情</h1><p>《蒲公英情人》和《绿门》都相当有意思，相比之前的那些意难平的结尾，这两篇小说都是有了一个圆满的结局，也满足了我对爱情所有的幻想。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://old-driver-zero.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="短篇小说" scheme="https://old-driver-zero.github.io/tags/%E7%9F%AD%E7%AF%87%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>白毛还是灰毛，这是个问题</title>
    <link href="https://old-driver-zero.github.io/posts/a0271e58.html"/>
    <id>https://old-driver-zero.github.io/posts/a0271e58.html</id>
    <published>2023-09-02T02:42:00.088Z</published>
    <updated>2023-09-02T04:14:19.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>屏幕中这位楚楚可怜的少女，是个魔女，也是个旅人。她的年龄大约还不到二十岁，身穿漆黑长袍且头戴三角帽，胸口上别着象征星辰的胸针，灰色的发丝随风摇曳，在太阳照耀下散发出耀眼的光芒，琉璃色的双瞳看似朝向前方，实际上却是眺望着远方的某处。她所经之处树木挥动枝条发出低语，挥洒树叶为她献上祝福。这位具有如此美貌，任谁都只能以惹人怜爱形容的她究竟是谁？</p><p>——“そう，私です”</p><p><del>好吧，我承认了，当初点进去看这部番就是馋女主的身子</del></p><h1 id="别样的旅行">别样的旅行</h1><p>我一开始被这部番塑造的美丽的世界、可爱的人物骗了，以为这是一部治愈番。少女高傲，没人愿意教她，最后终于出师成为魔女，又在魔法使之国帮助了一位困顿中的学徒，<del>从此开始了百合人生</del>，这本是一件多么美好的事情啊。</p><p>谁知到了第三集画风一转，植物危害着一整个王国的安全，妹妹变成了植物人，并引诱哥哥自投罗网；还有那一个出生就注定了自己不会获得幸福的女孩和那个让人伤感的童话故事。我直呼：上当了，这不是去幼儿园的车。当然后面的剧情果然没让我失望，尤其是那个杀人魔的故事，简直是都市怪谈。我早就知道改变过去是不会成功的，却没想到真相竟如此残酷。</p><p>其实纵观整个旅程，有开心的事情，也有黑暗的事情，或许这才是魔女之旅的真谛。伊蕾娜是个真正的旅行者，她往往没有参与改变剧情的走向，而是始终都作为一个旁观者，静静地看着这世间百态。有人间最真诚的祝福，也有史上最恶毒的诅咒；有离奇曲折的故事，也有轻松诙谐的桥段。每个故事都有自己的寓意，每个故事都试图创造出一个意料之外，情理之中的结尾，与其说我在看童话故事，不如说我是在看欧亨利小说。所以说，不光看女主可爱的外表是一种乐趣，享受剧情的点点滴滴也是值得品味的。</p><h1 id="白毛还是灰毛">白毛还是灰毛？</h1><p>终于能谈谈人物形象了。主角是个非常自恋、非常贪财、坏脾气的人，但她也有善良的一面。当初她看了《妮可旅行记》才萌发了旅行的念头，我们都知道妮可就是她妈妈，只有她不知道。事实上，她也不想知道，因为妮可的旅行已经结束，而她的旅行才刚刚开始，她会书写一本属于自己的旅行书。这就是她的成长。</p><p>还有我想吐槽一点很久了，女主叫“灰之魔女”，原因是她的头发是灰色的，可在动画中明明是白色的啊。可能虽然画师不懂颜色，但他懂我们的xp，我们就好这一口。</p><p>至于其它角色，限于篇幅原因，似乎刻画地较为单薄，但是有个性，这对这一部并不“贪婪”的作品来说已经是足够了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="ACG杂谈" scheme="https://old-driver-zero.github.io/categories/ACG%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="白毛" scheme="https://old-driver-zero.github.io/tags/%E7%99%BD%E6%AF%9B/"/>
    
      <category term="公路片" scheme="https://old-driver-zero.github.io/tags/%E5%85%AC%E8%B7%AF%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>做自己的英雄</title>
    <link href="https://old-driver-zero.github.io/posts/a98766fe.html"/>
    <id>https://old-driver-zero.github.io/posts/a98766fe.html</id>
    <published>2023-09-02T02:14:21.511Z</published>
    <updated>2023-09-02T02:39:17.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在我刚开始看这部番的时候，我是当成普通的异世界后宫番看的<del>简单来说就是厕纸</del>，但当我看了后面的几季时，对这部番有了一定的改观。</p><p>第一季是传统的王道英雄故事：主角出生卑微，有自己憧憬的对象，被人嫌弃，最终让所有人都称赞。</p><p>到了第二季就有了改观，传统的故事应该是英雄救美女，而这个“美女”应当是高贵而高尚的。然而，这里的被救者却是不起眼的小人族和让人看不起的娼妇，这是对传统英雄的颠覆。</p><p>第三季异端儿篇更是我认为的剧情上的巅峰，把这种故事的扭曲和英雄的光辉发挥到了极致。为了解救那些无辜的异端儿们，他愿意舍弃“英雄”之名，为他们而战。事实上，贝尔从头到尾都没有任何转变，他依旧是那个“亚撒西”的男主，而真正的英雄也确实应该是这样的。只是人们不认可这种行为，认为英雄必须永远正确、永远站在保护他们的立场上。而创作英雄故事的人更是故意抹去了这一点，让这些事情不会发生，不会破坏那个人们心中崇高的形象。所以“英雄”之名究竟应该属于那个被称为“英雄”的人，还是那些传颂“英雄事迹”的人呢？</p><p>第四季是硫党的福利回，没什么好说的，果然第三季已经是巅峰了。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot;
        
      
    
    </summary>
    
    
      <category term="ACG杂谈" scheme="https://old-driver-zero.github.io/categories/ACG%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="异世界" scheme="https://old-driver-zero.github.io/tags/%E5%BC%82%E4%B8%96%E7%95%8C/"/>
    
      <category term="英雄" scheme="https://old-driver-zero.github.io/tags/%E8%8B%B1%E9%9B%84/"/>
    
  </entry>
  
</feed>